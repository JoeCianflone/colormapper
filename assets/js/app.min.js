//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

/* underscore.string 3.2.2 | MIT licensed | http://epeli.github.com/underscore.string/ */

!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.s=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
var trim = _dereq_('./trim');
var decap = _dereq_('./decapitalize');

module.exports = function camelize(str, decapitalize) {
  str = trim(str).replace(/[-_\s]+(.)?/g, function(match, c) {
    return c ? c.toUpperCase() : "";
  });

  if (decapitalize === true) {
    return decap(str);
  } else {
    return str;
  }
};

},{"./decapitalize":10,"./trim":63}],2:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function capitalize(str, lowercaseRest) {
  str = makeString(str);
  var remainingChars = !lowercaseRest ? str.slice(1) : str.slice(1).toLowerCase();

  return str.charAt(0).toUpperCase() + remainingChars;
};

},{"./helper/makeString":21}],3:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function chars(str) {
  return makeString(str).split('');
};

},{"./helper/makeString":21}],4:[function(_dereq_,module,exports){
module.exports = function chop(str, step) {
  if (str == null) return [];
  str = String(str);
  step = ~~step;
  return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];
};

},{}],5:[function(_dereq_,module,exports){
var capitalize = _dereq_('./capitalize');
var camelize = _dereq_('./camelize');
var makeString = _dereq_('./helper/makeString');

module.exports = function classify(str) {
  str = makeString(str);
  return capitalize(camelize(str.replace(/[\W_]/g, ' ')).replace(/\s/g, ''));
};

},{"./camelize":1,"./capitalize":2,"./helper/makeString":21}],6:[function(_dereq_,module,exports){
var trim = _dereq_('./trim');

module.exports = function clean(str) {
  return trim(str).replace(/\s\s+/g, ' ');
};

},{"./trim":63}],7:[function(_dereq_,module,exports){

var makeString = _dereq_('./helper/makeString');

var from  = "ąàáäâãåæăćčĉęèéëêĝĥìíïîĵłľńňòóöőôõðøśșşšŝťțţŭùúüűûñÿýçżźž",
    to    = "aaaaaaaaaccceeeeeghiiiijllnnoooooooossssstttuuuuuunyyczzz";

from += from.toUpperCase();
to += to.toUpperCase();

to = to.split("");

// for tokens requireing multitoken output
from += "ß";
to.push('ss');


module.exports = function cleanDiacritics(str) {
    return makeString(str).replace(/.{1}/g, function(c){
      var index = from.indexOf(c);
      return index === -1 ? c : to[index];
  });
};

},{"./helper/makeString":21}],8:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function(str, substr) {
  str = makeString(str);
  substr = makeString(substr);

  if (str.length === 0 || substr.length === 0) return 0;
  
  return str.split(substr).length - 1;
};

},{"./helper/makeString":21}],9:[function(_dereq_,module,exports){
var trim = _dereq_('./trim');

module.exports = function dasherize(str) {
  return trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
};

},{"./trim":63}],10:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function decapitalize(str) {
  str = makeString(str);
  return str.charAt(0).toLowerCase() + str.slice(1);
};

},{"./helper/makeString":21}],11:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

function getIndent(str) {
  var matches = str.match(/^[\s\\t]*/gm);
  var indent = matches[0].length;
  
  for (var i = 1; i < matches.length; i++) {
    indent = Math.min(matches[i].length, indent);
  }

  return indent;
}

module.exports = function dedent(str, pattern) {
  str = makeString(str);
  var indent = getIndent(str);
  var reg;

  if (indent === 0) return str;

  if (typeof pattern === 'string') {
    reg = new RegExp('^' + pattern, 'gm');
  } else {
    reg = new RegExp('^[ \\t]{' + indent + '}', 'gm');
  }

  return str.replace(reg, '');
};

},{"./helper/makeString":21}],12:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');
var toPositive = _dereq_('./helper/toPositive');

module.exports = function endsWith(str, ends, position) {
  str = makeString(str);
  ends = '' + ends;
  if (typeof position == 'undefined') {
    position = str.length - ends.length;
  } else {
    position = Math.min(toPositive(position), str.length) - ends.length;
  }
  return position >= 0 && str.indexOf(ends, position) === position;
};

},{"./helper/makeString":21,"./helper/toPositive":23}],13:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');
var escapeChars = _dereq_('./helper/escapeChars');

var regexString = "[";
for(var key in escapeChars) {
  regexString += key;
}
regexString += "]";

var regex = new RegExp( regexString, 'g');

module.exports = function escapeHTML(str) {

  return makeString(str).replace(regex, function(m) {
    return '&' + escapeChars[m] + ';';
  });
};

},{"./helper/escapeChars":18,"./helper/makeString":21}],14:[function(_dereq_,module,exports){
module.exports = function() {
  var result = {};

  for (var prop in this) {
    if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse|join|map)$/)) continue;
    result[prop] = this[prop];
  }

  return result;
};

},{}],15:[function(_dereq_,module,exports){
//  Underscore.string
//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>
//  Underscore.string is freely distributable under the terms of the MIT license.
//  Documentation: https://github.com/epeli/underscore.string
//  Some code is borrowed from MooTools and Alexandru Marasteanu.
//  Version '3.2.2'

'use strict';

function s(value) {
  /* jshint validthis: true */
  if (!(this instanceof s)) return new s(value);
  this._wrapped = value;
}

s.VERSION = '3.2.2';

s.isBlank          = _dereq_('./isBlank');
s.stripTags        = _dereq_('./stripTags');
s.capitalize       = _dereq_('./capitalize');
s.decapitalize     = _dereq_('./decapitalize');
s.chop             = _dereq_('./chop');
s.trim             = _dereq_('./trim');
s.clean            = _dereq_('./clean');
s.cleanDiacritics  = _dereq_('./cleanDiacritics');
s.count            = _dereq_('./count');
s.chars            = _dereq_('./chars');
s.swapCase         = _dereq_('./swapCase');
s.escapeHTML       = _dereq_('./escapeHTML');
s.unescapeHTML     = _dereq_('./unescapeHTML');
s.splice           = _dereq_('./splice');
s.insert           = _dereq_('./insert');
s.replaceAll       = _dereq_('./replaceAll');
s.include          = _dereq_('./include');
s.join             = _dereq_('./join');
s.lines            = _dereq_('./lines');
s.dedent           = _dereq_('./dedent');
s.reverse          = _dereq_('./reverse');
s.startsWith       = _dereq_('./startsWith');
s.endsWith         = _dereq_('./endsWith');
s.pred             = _dereq_('./pred');
s.succ             = _dereq_('./succ');
s.titleize         = _dereq_('./titleize');
s.camelize         = _dereq_('./camelize');
s.underscored      = _dereq_('./underscored');
s.dasherize        = _dereq_('./dasherize');
s.classify         = _dereq_('./classify');
s.humanize         = _dereq_('./humanize');
s.ltrim            = _dereq_('./ltrim');
s.rtrim            = _dereq_('./rtrim');
s.truncate         = _dereq_('./truncate');
s.prune            = _dereq_('./prune');
s.words            = _dereq_('./words');
s.pad              = _dereq_('./pad');
s.lpad             = _dereq_('./lpad');
s.rpad             = _dereq_('./rpad');
s.lrpad            = _dereq_('./lrpad');
s.sprintf          = _dereq_('./sprintf');
s.vsprintf         = _dereq_('./vsprintf');
s.toNumber         = _dereq_('./toNumber');
s.numberFormat     = _dereq_('./numberFormat');
s.strRight         = _dereq_('./strRight');
s.strRightBack     = _dereq_('./strRightBack');
s.strLeft          = _dereq_('./strLeft');
s.strLeftBack      = _dereq_('./strLeftBack');
s.toSentence       = _dereq_('./toSentence');
s.toSentenceSerial = _dereq_('./toSentenceSerial');
s.slugify          = _dereq_('./slugify');
s.surround         = _dereq_('./surround');
s.quote            = _dereq_('./quote');
s.unquote          = _dereq_('./unquote');
s.repeat           = _dereq_('./repeat');
s.naturalCmp       = _dereq_('./naturalCmp');
s.levenshtein      = _dereq_('./levenshtein');
s.toBoolean        = _dereq_('./toBoolean');
s.exports          = _dereq_('./exports');
s.escapeRegExp     = _dereq_('./helper/escapeRegExp');
s.wrap             = _dereq_('./wrap');
s.map              = _dereq_('./map');

// Aliases
s.strip     = s.trim;
s.lstrip    = s.ltrim;
s.rstrip    = s.rtrim;
s.center    = s.lrpad;
s.rjust     = s.lpad;
s.ljust     = s.rpad;
s.contains  = s.include;
s.q         = s.quote;
s.toBool    = s.toBoolean;
s.camelcase = s.camelize;
s.mapChars  = s.map;


// Implement chaining
s.prototype = {
  value: function value() {
    return this._wrapped;
  }
};

function fn2method(key, fn) {
  if (typeof fn !== "function") return;
  s.prototype[key] = function() {
    var args = [this._wrapped].concat(Array.prototype.slice.call(arguments));
    var res = fn.apply(null, args);
    // if the result is non-string stop the chain and return the value
    return typeof res === 'string' ? new s(res) : res;
  };
}

// Copy functions to instance methods for chaining
for (var key in s) fn2method(key, s[key]);

fn2method("tap", function tap(string, fn) {
  return fn(string);
});

function prototype2method(methodName) {
  fn2method(methodName, function(context) {
    var args = Array.prototype.slice.call(arguments, 1);
    return String.prototype[methodName].apply(context, args);
  });
}

var prototypeMethods = [
    "toUpperCase",
    "toLowerCase",
    "split",
    "replace",
    "slice",
    "substring",
    "substr",
    "concat"
];

for (var method in prototypeMethods) prototype2method(prototypeMethods[method]);


module.exports = s;

},{"./camelize":1,"./capitalize":2,"./chars":3,"./chop":4,"./classify":5,"./clean":6,"./cleanDiacritics":7,"./count":8,"./dasherize":9,"./decapitalize":10,"./dedent":11,"./endsWith":12,"./escapeHTML":13,"./exports":14,"./helper/escapeRegExp":19,"./humanize":24,"./include":25,"./insert":26,"./isBlank":27,"./join":28,"./levenshtein":29,"./lines":30,"./lpad":31,"./lrpad":32,"./ltrim":33,"./map":34,"./naturalCmp":35,"./numberFormat":36,"./pad":37,"./pred":38,"./prune":39,"./quote":40,"./repeat":41,"./replaceAll":42,"./reverse":43,"./rpad":44,"./rtrim":45,"./slugify":46,"./splice":47,"./sprintf":48,"./startsWith":49,"./strLeft":50,"./strLeftBack":51,"./strRight":52,"./strRightBack":53,"./stripTags":54,"./succ":55,"./surround":56,"./swapCase":57,"./titleize":58,"./toBoolean":59,"./toNumber":60,"./toSentence":61,"./toSentenceSerial":62,"./trim":63,"./truncate":64,"./underscored":65,"./unescapeHTML":66,"./unquote":67,"./vsprintf":68,"./words":69,"./wrap":70}],16:[function(_dereq_,module,exports){
var makeString = _dereq_('./makeString');

module.exports = function adjacent(str, direction) {
  str = makeString(str);
  if (str.length === 0) {
    return '';
  }
  return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length - 1) + direction);
};

},{"./makeString":21}],17:[function(_dereq_,module,exports){
var escapeRegExp = _dereq_('./escapeRegExp');

module.exports = function defaultToWhiteSpace(characters) {
  if (characters == null)
    return '\\s';
  else if (characters.source)
    return characters.source;
  else
    return '[' + escapeRegExp(characters) + ']';
};

},{"./escapeRegExp":19}],18:[function(_dereq_,module,exports){
/* We're explicitly defining the list of entities we want to escape.
nbsp is an HTML entity, but we don't want to escape all space characters in a string, hence its omission in this map.

*/
var escapeChars = {
    '¢' : 'cent',
    '£' : 'pound',
    '¥' : 'yen',
    '€': 'euro',
    '©' :'copy',
    '®' : 'reg',
    '<' : 'lt',
    '>' : 'gt',
    '"' : 'quot',
    '&' : 'amp',
    "'" : '#39'
};

module.exports = escapeChars;

},{}],19:[function(_dereq_,module,exports){
var makeString = _dereq_('./makeString');

module.exports = function escapeRegExp(str) {
  return makeString(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
};

},{"./makeString":21}],20:[function(_dereq_,module,exports){
/*
We're explicitly defining the list of entities that might see in escape HTML strings
*/
var htmlEntities = {
  nbsp: ' ',
  cent: '¢',
  pound: '£',
  yen: '¥',
  euro: '€',
  copy: '©',
  reg: '®',
  lt: '<',
  gt: '>',
  quot: '"',
  amp: '&',
  apos: "'"
};

module.exports = htmlEntities;

},{}],21:[function(_dereq_,module,exports){
/**
 * Ensure some object is a coerced to a string
 **/
module.exports = function makeString(object) {
  if (object == null) return '';
  return '' + object;
};

},{}],22:[function(_dereq_,module,exports){
module.exports = function strRepeat(str, qty){
  if (qty < 1) return '';
  var result = '';
  while (qty > 0) {
    if (qty & 1) result += str;
    qty >>= 1, str += str;
  }
  return result;
};

},{}],23:[function(_dereq_,module,exports){
module.exports = function toPositive(number) {
  return number < 0 ? 0 : (+number || 0);
};

},{}],24:[function(_dereq_,module,exports){
var capitalize = _dereq_('./capitalize');
var underscored = _dereq_('./underscored');
var trim = _dereq_('./trim');

module.exports = function humanize(str) {
  return capitalize(trim(underscored(str).replace(/_id$/, '').replace(/_/g, ' ')));
};

},{"./capitalize":2,"./trim":63,"./underscored":65}],25:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function include(str, needle) {
  if (needle === '') return true;
  return makeString(str).indexOf(needle) !== -1;
};

},{"./helper/makeString":21}],26:[function(_dereq_,module,exports){
var splice = _dereq_('./splice');

module.exports = function insert(str, i, substr) {
  return splice(str, i, 0, substr);
};

},{"./splice":47}],27:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function isBlank(str) {
  return (/^\s*$/).test(makeString(str));
};

},{"./helper/makeString":21}],28:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');
var slice = [].slice;

module.exports = function join() {
  var args = slice.call(arguments),
    separator = args.shift();

  return args.join(makeString(separator));
};

},{"./helper/makeString":21}],29:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

/**
 * Based on the implementation here: https://github.com/hiddentao/fast-levenshtein
 */
module.exports = function levenshtein(str1, str2) {
  'use strict';
  str1 = makeString(str1);
  str2 = makeString(str2);

  // Short cut cases  
  if (str1 === str2) return 0;
  if (!str1 || !str2) return Math.max(str1.length, str2.length);

  // two rows
  var prevRow = new Array(str2.length + 1);

  // initialise previous row
  for (var i = 0; i < prevRow.length; ++i) {
    prevRow[i] = i;
  }

  // calculate current row distance from previous row
  for (i = 0; i < str1.length; ++i) {
    var nextCol = i + 1;

    for (var j = 0; j < str2.length; ++j) {
      var curCol = nextCol;

      // substution
      nextCol = prevRow[j] + ( (str1.charAt(i) === str2.charAt(j)) ? 0 : 1 );
      // insertion
      var tmp = curCol + 1;
      if (nextCol > tmp) {
        nextCol = tmp;
      }
      // deletion
      tmp = prevRow[j + 1] + 1;
      if (nextCol > tmp) {
        nextCol = tmp;
      }

      // copy current col value into previous (in preparation for next iteration)
      prevRow[j] = curCol;
    }

    // copy last col value into previous (in preparation for next iteration)
    prevRow[j] = nextCol;
  }

  return nextCol;
};

},{"./helper/makeString":21}],30:[function(_dereq_,module,exports){
module.exports = function lines(str) {
  if (str == null) return [];
  return String(str).split(/\r\n?|\n/);
};

},{}],31:[function(_dereq_,module,exports){
var pad = _dereq_('./pad');

module.exports = function lpad(str, length, padStr) {
  return pad(str, length, padStr);
};

},{"./pad":37}],32:[function(_dereq_,module,exports){
var pad = _dereq_('./pad');

module.exports = function lrpad(str, length, padStr) {
  return pad(str, length, padStr, 'both');
};

},{"./pad":37}],33:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');
var defaultToWhiteSpace = _dereq_('./helper/defaultToWhiteSpace');
var nativeTrimLeft = String.prototype.trimLeft;

module.exports = function ltrim(str, characters) {
  str = makeString(str);
  if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);
  characters = defaultToWhiteSpace(characters);
  return str.replace(new RegExp('^' + characters + '+'), '');
};

},{"./helper/defaultToWhiteSpace":17,"./helper/makeString":21}],34:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function(str, callback) {
  str = makeString(str);

  if (str.length === 0 || typeof callback !== 'function') return str;

  return str.replace(/./g, callback);
};

},{"./helper/makeString":21}],35:[function(_dereq_,module,exports){
module.exports = function naturalCmp(str1, str2) {
  if (str1 == str2) return 0;
  if (!str1) return -1;
  if (!str2) return 1;

  var cmpRegex = /(\.\d+|\d+|\D+)/g,
    tokens1 = String(str1).match(cmpRegex),
    tokens2 = String(str2).match(cmpRegex),
    count = Math.min(tokens1.length, tokens2.length);

  for (var i = 0; i < count; i++) {
    var a = tokens1[i],
      b = tokens2[i];

    if (a !== b) {
      var num1 = +a;
      var num2 = +b;
      if (num1 === num1 && num2 === num2) {
        return num1 > num2 ? 1 : -1;
      }
      return a < b ? -1 : 1;
    }
  }

  if (tokens1.length != tokens2.length)
    return tokens1.length - tokens2.length;

  return str1 < str2 ? -1 : 1;
};

},{}],36:[function(_dereq_,module,exports){
module.exports = function numberFormat(number, dec, dsep, tsep) {
  if (isNaN(number) || number == null) return '';

  number = number.toFixed(~~dec);
  tsep = typeof tsep == 'string' ? tsep : ',';

  var parts = number.split('.'),
    fnums = parts[0],
    decimals = parts[1] ? (dsep || '.') + parts[1] : '';

  return fnums.replace(/(\d)(?=(?:\d{3})+$)/g, '$1' + tsep) + decimals;
};

},{}],37:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');
var strRepeat = _dereq_('./helper/strRepeat');

module.exports = function pad(str, length, padStr, type) {
  str = makeString(str);
  length = ~~length;

  var padlen = 0;

  if (!padStr)
    padStr = ' ';
  else if (padStr.length > 1)
    padStr = padStr.charAt(0);

  switch (type) {
    case 'right':
      padlen = length - str.length;
      return str + strRepeat(padStr, padlen);
    case 'both':
      padlen = length - str.length;
      return strRepeat(padStr, Math.ceil(padlen / 2)) + str + strRepeat(padStr, Math.floor(padlen / 2));
    default: // 'left'
      padlen = length - str.length;
      return strRepeat(padStr, padlen) + str;
  }
};

},{"./helper/makeString":21,"./helper/strRepeat":22}],38:[function(_dereq_,module,exports){
var adjacent = _dereq_('./helper/adjacent');

module.exports = function succ(str) {
  return adjacent(str, -1);
};

},{"./helper/adjacent":16}],39:[function(_dereq_,module,exports){
/**
 * _s.prune: a more elegant version of truncate
 * prune extra chars, never leaving a half-chopped word.
 * @author github.com/rwz
 */
var makeString = _dereq_('./helper/makeString');
var rtrim = _dereq_('./rtrim');

module.exports = function prune(str, length, pruneStr) {
  str = makeString(str);
  length = ~~length;
  pruneStr = pruneStr != null ? String(pruneStr) : '...';

  if (str.length <= length) return str;

  var tmpl = function(c) {
    return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';
  },
    template = str.slice(0, length + 1).replace(/.(?=\W*\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'

  if (template.slice(template.length - 2).match(/\w\w/))
    template = template.replace(/\s*\S+$/, '');
  else
    template = rtrim(template.slice(0, template.length - 1));

  return (template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr;
};

},{"./helper/makeString":21,"./rtrim":45}],40:[function(_dereq_,module,exports){
var surround = _dereq_('./surround');

module.exports = function quote(str, quoteChar) {
  return surround(str, quoteChar || '"');
};

},{"./surround":56}],41:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');
var strRepeat = _dereq_('./helper/strRepeat');

module.exports = function repeat(str, qty, separator) {
  str = makeString(str);

  qty = ~~qty;

  // using faster implementation if separator is not needed;
  if (separator == null) return strRepeat(str, qty);

  // this one is about 300x slower in Google Chrome
  /*eslint no-empty: 0*/
  for (var repeat = []; qty > 0; repeat[--qty] = str) {}
  return repeat.join(separator);
};

},{"./helper/makeString":21,"./helper/strRepeat":22}],42:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function replaceAll(str, find, replace, ignorecase) {
  var flags = (ignorecase === true)?'gi':'g';
  var reg = new RegExp(find, flags);

  return makeString(str).replace(reg, replace);
};

},{"./helper/makeString":21}],43:[function(_dereq_,module,exports){
var chars = _dereq_('./chars');

module.exports = function reverse(str) {
  return chars(str).reverse().join('');
};

},{"./chars":3}],44:[function(_dereq_,module,exports){
var pad = _dereq_('./pad');

module.exports = function rpad(str, length, padStr) {
  return pad(str, length, padStr, 'right');
};

},{"./pad":37}],45:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');
var defaultToWhiteSpace = _dereq_('./helper/defaultToWhiteSpace');
var nativeTrimRight = String.prototype.trimRight;

module.exports = function rtrim(str, characters) {
  str = makeString(str);
  if (!characters && nativeTrimRight) return nativeTrimRight.call(str);
  characters = defaultToWhiteSpace(characters);
  return str.replace(new RegExp(characters + '+$'), '');
};

},{"./helper/defaultToWhiteSpace":17,"./helper/makeString":21}],46:[function(_dereq_,module,exports){
var trim = _dereq_('./trim');
var dasherize = _dereq_('./dasherize');
var cleanDiacritics = _dereq_("./cleanDiacritics");

module.exports = function slugify(str) {
  return trim(dasherize(cleanDiacritics(str).replace(/[^\w\s-]/g, '-').toLowerCase()), '-');
};

},{"./cleanDiacritics":7,"./dasherize":9,"./trim":63}],47:[function(_dereq_,module,exports){
var chars = _dereq_('./chars');

module.exports = function splice(str, i, howmany, substr) {
  var arr = chars(str);
  arr.splice(~~i, ~~howmany, substr);
  return arr.join('');
};

},{"./chars":3}],48:[function(_dereq_,module,exports){
// sprintf() for JavaScript 0.7-beta1
// http://www.diveintojavascript.com/projects/javascript-sprintf
//
// Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>
// All rights reserved.
var strRepeat = _dereq_('./helper/strRepeat');
var toString = Object.prototype.toString;
var sprintf = (function() {
  function get_type(variable) {
    return toString.call(variable).slice(8, -1).toLowerCase();
  }

  var str_repeat = strRepeat;

  var str_format = function() {
    if (!str_format.cache.hasOwnProperty(arguments[0])) {
      str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
    }
    return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
  };

  str_format.format = function(parse_tree, argv) {
    var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
    for (i = 0; i < tree_length; i++) {
      node_type = get_type(parse_tree[i]);
      if (node_type === 'string') {
        output.push(parse_tree[i]);
      }
      else if (node_type === 'array') {
        match = parse_tree[i]; // convenience purposes only
        if (match[2]) { // keyword argument
          arg = argv[cursor];
          for (k = 0; k < match[2].length; k++) {
            if (!arg.hasOwnProperty(match[2][k])) {
              throw new Error(sprintf('[_.sprintf] property "%s" does not exist', match[2][k]));
            }
            arg = arg[match[2][k]];
          }
        } else if (match[1]) { // positional argument (explicit)
          arg = argv[match[1]];
        }
        else { // positional argument (implicit)
          arg = argv[cursor++];
        }

        if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
          throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));
        }
        switch (match[8]) {
          case 'b': arg = arg.toString(2); break;
          case 'c': arg = String.fromCharCode(arg); break;
          case 'd': arg = parseInt(arg, 10); break;
          case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
          case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
          case 'o': arg = arg.toString(8); break;
          case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
          case 'u': arg = Math.abs(arg); break;
          case 'x': arg = arg.toString(16); break;
          case 'X': arg = arg.toString(16).toUpperCase(); break;
        }
        arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
        pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
        pad_length = match[6] - String(arg).length;
        pad = match[6] ? str_repeat(pad_character, pad_length) : '';
        output.push(match[5] ? arg + pad : pad + arg);
      }
    }
    return output.join('');
  };

  str_format.cache = {};

  str_format.parse = function(fmt) {
    var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
    while (_fmt) {
      if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
        parse_tree.push(match[0]);
      }
      else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
        parse_tree.push('%');
      }
      else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
        if (match[2]) {
          arg_names |= 1;
          var field_list = [], replacement_field = match[2], field_match = [];
          if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
            field_list.push(field_match[1]);
            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
              if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                field_list.push(field_match[1]);
              }
              else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                field_list.push(field_match[1]);
              }
              else {
                throw new Error('[_.sprintf] huh?');
              }
            }
          }
          else {
            throw new Error('[_.sprintf] huh?');
          }
          match[2] = field_list;
        }
        else {
          arg_names |= 2;
        }
        if (arg_names === 3) {
          throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');
        }
        parse_tree.push(match);
      }
      else {
        throw new Error('[_.sprintf] huh?');
      }
      _fmt = _fmt.substring(match[0].length);
    }
    return parse_tree;
  };

  return str_format;
})();

module.exports = sprintf;

},{"./helper/strRepeat":22}],49:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');
var toPositive = _dereq_('./helper/toPositive');

module.exports = function startsWith(str, starts, position) {
  str = makeString(str);
  starts = '' + starts;
  position = position == null ? 0 : Math.min(toPositive(position), str.length);
  return str.lastIndexOf(starts, position) === position;
};

},{"./helper/makeString":21,"./helper/toPositive":23}],50:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function strLeft(str, sep) {
  str = makeString(str);
  sep = makeString(sep);
  var pos = !sep ? -1 : str.indexOf(sep);
  return~ pos ? str.slice(0, pos) : str;
};

},{"./helper/makeString":21}],51:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function strLeftBack(str, sep) {
  str = makeString(str);
  sep = makeString(sep);
  var pos = str.lastIndexOf(sep);
  return~ pos ? str.slice(0, pos) : str;
};

},{"./helper/makeString":21}],52:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function strRight(str, sep) {
  str = makeString(str);
  sep = makeString(sep);
  var pos = !sep ? -1 : str.indexOf(sep);
  return~ pos ? str.slice(pos + sep.length, str.length) : str;
};

},{"./helper/makeString":21}],53:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function strRightBack(str, sep) {
  str = makeString(str);
  sep = makeString(sep);
  var pos = !sep ? -1 : str.lastIndexOf(sep);
  return~ pos ? str.slice(pos + sep.length, str.length) : str;
};

},{"./helper/makeString":21}],54:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function stripTags(str) {
  return makeString(str).replace(/<\/?[^>]+>/g, '');
};

},{"./helper/makeString":21}],55:[function(_dereq_,module,exports){
var adjacent = _dereq_('./helper/adjacent');

module.exports = function succ(str) {
  return adjacent(str, 1);
};

},{"./helper/adjacent":16}],56:[function(_dereq_,module,exports){
module.exports = function surround(str, wrapper) {
  return [wrapper, str, wrapper].join('');
};

},{}],57:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function swapCase(str) {
  return makeString(str).replace(/\S/g, function(c) {
    return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();
  });
};

},{"./helper/makeString":21}],58:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function titleize(str) {
  return makeString(str).toLowerCase().replace(/(?:^|\s|-)\S/g, function(c) {
    return c.toUpperCase();
  });
};

},{"./helper/makeString":21}],59:[function(_dereq_,module,exports){
var trim = _dereq_('./trim');

function boolMatch(s, matchers) {
  var i, matcher, down = s.toLowerCase();
  matchers = [].concat(matchers);
  for (i = 0; i < matchers.length; i += 1) {
    matcher = matchers[i];
    if (!matcher) continue;
    if (matcher.test && matcher.test(s)) return true;
    if (matcher.toLowerCase() === down) return true;
  }
}

module.exports = function toBoolean(str, trueValues, falseValues) {
  if (typeof str === "number") str = "" + str;
  if (typeof str !== "string") return !!str;
  str = trim(str);
  if (boolMatch(str, trueValues || ["true", "1"])) return true;
  if (boolMatch(str, falseValues || ["false", "0"])) return false;
};

},{"./trim":63}],60:[function(_dereq_,module,exports){
module.exports = function toNumber(num, precision) {
  if (num == null) return 0;
  var factor = Math.pow(10, isFinite(precision) ? precision : 0);
  return Math.round(num * factor) / factor;
};

},{}],61:[function(_dereq_,module,exports){
var rtrim = _dereq_('./rtrim');

module.exports = function toSentence(array, separator, lastSeparator, serial) {
  separator = separator || ', ';
  lastSeparator = lastSeparator || ' and ';
  var a = array.slice(),
    lastMember = a.pop();

  if (array.length > 2 && serial) lastSeparator = rtrim(separator) + lastSeparator;

  return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;
};

},{"./rtrim":45}],62:[function(_dereq_,module,exports){
var toSentence = _dereq_('./toSentence');

module.exports = function toSentenceSerial(array, sep, lastSep) {
  return toSentence(array, sep, lastSep, true);
};

},{"./toSentence":61}],63:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');
var defaultToWhiteSpace = _dereq_('./helper/defaultToWhiteSpace');
var nativeTrim = String.prototype.trim;

module.exports = function trim(str, characters) {
  str = makeString(str);
  if (!characters && nativeTrim) return nativeTrim.call(str);
  characters = defaultToWhiteSpace(characters);
  return str.replace(new RegExp('^' + characters + '+|' + characters + '+$', 'g'), '');
};

},{"./helper/defaultToWhiteSpace":17,"./helper/makeString":21}],64:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');

module.exports = function truncate(str, length, truncateStr) {
  str = makeString(str);
  truncateStr = truncateStr || '...';
  length = ~~length;
  return str.length > length ? str.slice(0, length) + truncateStr : str;
};

},{"./helper/makeString":21}],65:[function(_dereq_,module,exports){
var trim = _dereq_('./trim');

module.exports = function underscored(str) {
  return trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
};

},{"./trim":63}],66:[function(_dereq_,module,exports){
var makeString = _dereq_('./helper/makeString');
var htmlEntities = _dereq_('./helper/htmlEntities');

module.exports = function unescapeHTML(str) {
  return makeString(str).replace(/\&([^;]+);/g, function(entity, entityCode) {
    var match;

    if (entityCode in htmlEntities) {
      return htmlEntities[entityCode];
    /*eslint no-cond-assign: 0*/
    } else if (match = entityCode.match(/^#x([\da-fA-F]+)$/)) {
      return String.fromCharCode(parseInt(match[1], 16));
    /*eslint no-cond-assign: 0*/
    } else if (match = entityCode.match(/^#(\d+)$/)) {
      return String.fromCharCode(~~match[1]);
    } else {
      return entity;
    }
  });
};

},{"./helper/htmlEntities":20,"./helper/makeString":21}],67:[function(_dereq_,module,exports){
module.exports = function unquote(str, quoteChar) {
  quoteChar = quoteChar || '"';
  if (str[0] === quoteChar && str[str.length - 1] === quoteChar)
    return str.slice(1, str.length - 1);
  else return str;
};

},{}],68:[function(_dereq_,module,exports){
var sprintf = _dereq_('./sprintf');

module.exports = function vsprintf(fmt, argv) {
  argv.unshift(fmt);
  return sprintf.apply(null, argv);
};

},{"./sprintf":48}],69:[function(_dereq_,module,exports){
var isBlank = _dereq_('./isBlank');
var trim = _dereq_('./trim');

module.exports = function words(str, delimiter) {
  if (isBlank(str)) return [];
  return trim(str, delimiter).split(delimiter || /\s+/);
};

},{"./isBlank":27,"./trim":63}],70:[function(_dereq_,module,exports){
// Wrap
// wraps a string by a certain width

var makeString = _dereq_('./helper/makeString');

module.exports = function wrap(str, options){
	str = makeString(str);

	options = options || {};

	var width = options.width || 75;
	var seperator = options.seperator || '\n';
	var cut = options.cut || false;
	var preserveSpaces = options.preserveSpaces || false;
	var trailingSpaces = options.trailingSpaces || false;

  var result;

	if(width <= 0){
		return str;
	}

	else if(!cut){

		var words = str.split(" ");
		var current_column = 0;
		result = "";

		while(words.length > 0){
			
			// if adding a space and the next word would cause this line to be longer than width...
			if(1 + words[0].length + current_column > width){
				//start a new line if this line is not already empty
				if(current_column > 0){
					// add a space at the end of the line is preserveSpaces is true
					if (preserveSpaces){
						result += ' ';
						current_column++;
					}
					// fill the rest of the line with spaces if trailingSpaces option is true
					else if(trailingSpaces){
						while(current_column < width){
							result += ' ';
							current_column++;
						}						
					}
					//start new line
					result += seperator;
					current_column = 0;
				}
			}

			// if not at the begining of the line, add a space in front of the word
			if(current_column > 0){
				result += " ";
				current_column++;
			}

			// tack on the next word, update current column, a pop words array
			result += words[0];
			current_column += words[0].length;
			words.shift();

		}

		// fill the rest of the line with spaces if trailingSpaces option is true
		if(trailingSpaces){
			while(current_column < width){
				result += ' ';
				current_column++;
			}						
		}

		return result;

	}

	else {

		var index = 0;
		result = "";

		// walk through each character and add seperators where appropriate
		while(index < str.length){
			if(index % width == 0 && index > 0){
				result += seperator;
			}
			result += str.charAt(index);
			index++;
		}

		// fill the rest of the line with spaces if trailingSpaces option is true
		if(trailingSpaces){
			while(index % width > 0){
				result += ' ';
				index++;
			}						
		}
		
		return result;
	}
};

},{"./helper/makeString":21}]},{},[15])
(15)
});
/*!

 handlebars v4.0.5

Copyright (C) 2011-2015 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Handlebars"] = factory();
	else
		root["Handlebars"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(1)['default'];

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;

	var _handlebarsBase = __webpack_require__(3);

	var base = _interopRequireWildcard(_handlebarsBase);

	// Each of these augment the Handlebars object. No need to setup here.
	// (This is done to easily share code between commonjs and browse envs)

	var _handlebarsSafeString = __webpack_require__(17);

	var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

	var _handlebarsException = __webpack_require__(5);

	var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

	var _handlebarsUtils = __webpack_require__(4);

	var Utils = _interopRequireWildcard(_handlebarsUtils);

	var _handlebarsRuntime = __webpack_require__(18);

	var runtime = _interopRequireWildcard(_handlebarsRuntime);

	var _handlebarsNoConflict = __webpack_require__(19);

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	// For compatibility and usage outside of module systems, make the Handlebars object a namespace
	function create() {
	  var hb = new base.HandlebarsEnvironment();

	  Utils.extend(hb, base);
	  hb.SafeString = _handlebarsSafeString2['default'];
	  hb.Exception = _handlebarsException2['default'];
	  hb.Utils = Utils;
	  hb.escapeExpression = Utils.escapeExpression;

	  hb.VM = runtime;
	  hb.template = function (spec) {
	    return runtime.template(spec, hb);
	  };

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }

	    newObj["default"] = obj;
	    return newObj;
	  }
	};

	exports.__esModule = true;

/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;
	exports.HandlebarsEnvironment = HandlebarsEnvironment;

	var _utils = __webpack_require__(4);

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	var _helpers = __webpack_require__(6);

	var _decorators = __webpack_require__(14);

	var _logger = __webpack_require__(16);

	var _logger2 = _interopRequireDefault(_logger);

	var VERSION = '4.0.5';
	exports.VERSION = VERSION;
	var COMPILER_REVISION = 7;

	exports.COMPILER_REVISION = COMPILER_REVISION;
	var REVISION_CHANGES = {
	  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
	  2: '== 1.0.0-rc.3',
	  3: '== 1.0.0-rc.4',
	  4: '== 1.x.x',
	  5: '== 2.0.0-alpha.x',
	  6: '>= 2.0.0-beta.1',
	  7: '>= 4.0.0'
	};

	exports.REVISION_CHANGES = REVISION_CHANGES;
	var objectType = '[object Object]';

	function HandlebarsEnvironment(helpers, partials, decorators) {
	  this.helpers = helpers || {};
	  this.partials = partials || {};
	  this.decorators = decorators || {};

	  _helpers.registerDefaultHelpers(this);
	  _decorators.registerDefaultDecorators(this);
	}

	HandlebarsEnvironment.prototype = {
	  constructor: HandlebarsEnvironment,

	  logger: _logger2['default'],
	  log: _logger2['default'].log,

	  registerHelper: function registerHelper(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple helpers');
	      }
	      _utils.extend(this.helpers, name);
	    } else {
	      this.helpers[name] = fn;
	    }
	  },
	  unregisterHelper: function unregisterHelper(name) {
	    delete this.helpers[name];
	  },

	  registerPartial: function registerPartial(name, partial) {
	    if (_utils.toString.call(name) === objectType) {
	      _utils.extend(this.partials, name);
	    } else {
	      if (typeof partial === 'undefined') {
	        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
	      }
	      this.partials[name] = partial;
	    }
	  },
	  unregisterPartial: function unregisterPartial(name) {
	    delete this.partials[name];
	  },

	  registerDecorator: function registerDecorator(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple decorators');
	      }
	      _utils.extend(this.decorators, name);
	    } else {
	      this.decorators[name] = fn;
	    }
	  },
	  unregisterDecorator: function unregisterDecorator(name) {
	    delete this.decorators[name];
	  }
	};

	var log = _logger2['default'].log;

	exports.log = log;
	exports.createFrame = _utils.createFrame;
	exports.logger = _logger2['default'];

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.extend = extend;
	exports.indexOf = indexOf;
	exports.escapeExpression = escapeExpression;
	exports.isEmpty = isEmpty;
	exports.createFrame = createFrame;
	exports.blockParams = blockParams;
	exports.appendContextPath = appendContextPath;
	var escape = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#x27;',
	  '`': '&#x60;',
	  '=': '&#x3D;'
	};

	var badChars = /[&<>"'`=]/g,
	    possible = /[&<>"'`=]/;

	function escapeChar(chr) {
	  return escape[chr];
	}

	function extend(obj /* , ...source */) {
	  for (var i = 1; i < arguments.length; i++) {
	    for (var key in arguments[i]) {
	      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
	        obj[key] = arguments[i][key];
	      }
	    }
	  }

	  return obj;
	}

	var toString = Object.prototype.toString;

	exports.toString = toString;
	// Sourced from lodash
	// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
	/* eslint-disable func-style */
	var isFunction = function isFunction(value) {
	  return typeof value === 'function';
	};
	// fallback for older versions of Chrome and Safari
	/* istanbul ignore next */
	if (isFunction(/x/)) {
	  exports.isFunction = isFunction = function (value) {
	    return typeof value === 'function' && toString.call(value) === '[object Function]';
	  };
	}
	exports.isFunction = isFunction;

	/* eslint-enable func-style */

	/* istanbul ignore next */
	var isArray = Array.isArray || function (value) {
	  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
	};

	exports.isArray = isArray;
	// Older IE versions do not directly support indexOf so we must implement our own, sadly.

	function indexOf(array, value) {
	  for (var i = 0, len = array.length; i < len; i++) {
	    if (array[i] === value) {
	      return i;
	    }
	  }
	  return -1;
	}

	function escapeExpression(string) {
	  if (typeof string !== 'string') {
	    // don't escape SafeStrings, since they're already safe
	    if (string && string.toHTML) {
	      return string.toHTML();
	    } else if (string == null) {
	      return '';
	    } else if (!string) {
	      return string + '';
	    }

	    // Force a string conversion as this will be done by the append regardless and
	    // the regex test will do this transparently behind the scenes, causing issues if
	    // an object's to string has escaped characters in it.
	    string = '' + string;
	  }

	  if (!possible.test(string)) {
	    return string;
	  }
	  return string.replace(badChars, escapeChar);
	}

	function isEmpty(value) {
	  if (!value && value !== 0) {
	    return true;
	  } else if (isArray(value) && value.length === 0) {
	    return true;
	  } else {
	    return false;
	  }
	}

	function createFrame(object) {
	  var frame = extend({}, object);
	  frame._parent = object;
	  return frame;
	}

	function blockParams(params, ids) {
	  params.path = ids;
	  return params;
	}

	function appendContextPath(contextPath, id) {
	  return (contextPath ? contextPath + '.' : '') + id;
	}

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

	function Exception(message, node) {
	  var loc = node && node.loc,
	      line = undefined,
	      column = undefined;
	  if (loc) {
	    line = loc.start.line;
	    column = loc.start.column;

	    message += ' - ' + line + ':' + column;
	  }

	  var tmp = Error.prototype.constructor.call(this, message);

	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
	  for (var idx = 0; idx < errorProps.length; idx++) {
	    this[errorProps[idx]] = tmp[errorProps[idx]];
	  }

	  /* istanbul ignore else */
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, Exception);
	  }

	  if (loc) {
	    this.lineNumber = line;
	    this.column = column;
	  }
	}

	Exception.prototype = new Error();

	exports['default'] = Exception;
	module.exports = exports['default'];

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;
	exports.registerDefaultHelpers = registerDefaultHelpers;

	var _helpersBlockHelperMissing = __webpack_require__(7);

	var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

	var _helpersEach = __webpack_require__(8);

	var _helpersEach2 = _interopRequireDefault(_helpersEach);

	var _helpersHelperMissing = __webpack_require__(9);

	var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

	var _helpersIf = __webpack_require__(10);

	var _helpersIf2 = _interopRequireDefault(_helpersIf);

	var _helpersLog = __webpack_require__(11);

	var _helpersLog2 = _interopRequireDefault(_helpersLog);

	var _helpersLookup = __webpack_require__(12);

	var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

	var _helpersWith = __webpack_require__(13);

	var _helpersWith2 = _interopRequireDefault(_helpersWith);

	function registerDefaultHelpers(instance) {
	  _helpersBlockHelperMissing2['default'](instance);
	  _helpersEach2['default'](instance);
	  _helpersHelperMissing2['default'](instance);
	  _helpersIf2['default'](instance);
	  _helpersLog2['default'](instance);
	  _helpersLookup2['default'](instance);
	  _helpersWith2['default'](instance);
	}

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	exports['default'] = function (instance) {
	  instance.registerHelper('blockHelperMissing', function (context, options) {
	    var inverse = options.inverse,
	        fn = options.fn;

	    if (context === true) {
	      return fn(this);
	    } else if (context === false || context == null) {
	      return inverse(this);
	    } else if (_utils.isArray(context)) {
	      if (context.length > 0) {
	        if (options.ids) {
	          options.ids = [options.name];
	        }

	        return instance.helpers.each(context, options);
	      } else {
	        return inverse(this);
	      }
	    } else {
	      if (options.data && options.ids) {
	        var data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
	        options = { data: data };
	      }

	      return fn(context, options);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('each', function (context, options) {
	    if (!options) {
	      throw new _exception2['default']('Must pass iterator to #each');
	    }

	    var fn = options.fn,
	        inverse = options.inverse,
	        i = 0,
	        ret = '',
	        data = undefined,
	        contextPath = undefined;

	    if (options.data && options.ids) {
	      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
	    }

	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    if (options.data) {
	      data = _utils.createFrame(options.data);
	    }

	    function execIteration(field, index, last) {
	      if (data) {
	        data.key = field;
	        data.index = index;
	        data.first = index === 0;
	        data.last = !!last;

	        if (contextPath) {
	          data.contextPath = contextPath + field;
	        }
	      }

	      ret = ret + fn(context[field], {
	        data: data,
	        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
	      });
	    }

	    if (context && typeof context === 'object') {
	      if (_utils.isArray(context)) {
	        for (var j = context.length; i < j; i++) {
	          if (i in context) {
	            execIteration(i, i, i === context.length - 1);
	          }
	        }
	      } else {
	        var priorKey = undefined;

	        for (var key in context) {
	          if (context.hasOwnProperty(key)) {
	            // We're running the iterations one step out of sync so we can detect
	            // the last iteration without have to scan the object twice and create
	            // an itermediate keys array.
	            if (priorKey !== undefined) {
	              execIteration(priorKey, i - 1);
	            }
	            priorKey = key;
	            i++;
	          }
	        }
	        if (priorKey !== undefined) {
	          execIteration(priorKey, i - 1, true);
	        }
	      }
	    }

	    if (i === 0) {
	      ret = inverse(this);
	    }

	    return ret;
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('helperMissing', function () /* [args, ]options */{
	    if (arguments.length === 1) {
	      // A missing field in a {{foo}} construct.
	      return undefined;
	    } else {
	      // Someone is actually trying to call something, blow up.
	      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
	    }
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	exports['default'] = function (instance) {
	  instance.registerHelper('if', function (conditional, options) {
	    if (_utils.isFunction(conditional)) {
	      conditional = conditional.call(this);
	    }

	    // Default behavior is to render the positive path if the value is truthy and not empty.
	    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
	    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
	    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
	      return options.inverse(this);
	    } else {
	      return options.fn(this);
	    }
	  });

	  instance.registerHelper('unless', function (conditional, options) {
	    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('log', function () /* message, options */{
	    var args = [undefined],
	        options = arguments[arguments.length - 1];
	    for (var i = 0; i < arguments.length - 1; i++) {
	      args.push(arguments[i]);
	    }

	    var level = 1;
	    if (options.hash.level != null) {
	      level = options.hash.level;
	    } else if (options.data && options.data.level != null) {
	      level = options.data.level;
	    }
	    args[0] = level;

	    instance.log.apply(instance, args);
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('lookup', function (obj, field) {
	    return obj && obj[field];
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	exports['default'] = function (instance) {
	  instance.registerHelper('with', function (context, options) {
	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    var fn = options.fn;

	    if (!_utils.isEmpty(context)) {
	      var data = options.data;
	      if (options.data && options.ids) {
	        data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
	      }

	      return fn(context, {
	        data: data,
	        blockParams: _utils.blockParams([context], [data && data.contextPath])
	      });
	    } else {
	      return options.inverse(this);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;
	exports.registerDefaultDecorators = registerDefaultDecorators;

	var _decoratorsInline = __webpack_require__(15);

	var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

	function registerDefaultDecorators(instance) {
	  _decoratorsInline2['default'](instance);
	}

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	exports['default'] = function (instance) {
	  instance.registerDecorator('inline', function (fn, props, container, options) {
	    var ret = fn;
	    if (!props.partials) {
	      props.partials = {};
	      ret = function (context, options) {
	        // Create a new partials stack frame prior to exec.
	        var original = container.partials;
	        container.partials = _utils.extend({}, original, props.partials);
	        var ret = fn(context, options);
	        container.partials = original;
	        return ret;
	      };
	    }

	    props.partials[options.args[0]] = options.fn;

	    return ret;
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	var logger = {
	  methodMap: ['debug', 'info', 'warn', 'error'],
	  level: 'info',

	  // Maps a given level value to the `methodMap` indexes above.
	  lookupLevel: function lookupLevel(level) {
	    if (typeof level === 'string') {
	      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
	      if (levelMap >= 0) {
	        level = levelMap;
	      } else {
	        level = parseInt(level, 10);
	      }
	    }

	    return level;
	  },

	  // Can be overridden in the host environment
	  log: function log(level) {
	    level = logger.lookupLevel(level);

	    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
	      var method = logger.methodMap[level];
	      if (!console[method]) {
	        // eslint-disable-line no-console
	        method = 'log';
	      }

	      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        message[_key - 1] = arguments[_key];
	      }

	      console[method].apply(console, message); // eslint-disable-line no-console
	    }
	  }
	};

	exports['default'] = logger;
	module.exports = exports['default'];

/***/ },
/* 17 */
/***/ function(module, exports) {

	// Build out our basic SafeString type
	'use strict';

	exports.__esModule = true;
	function SafeString(string) {
	  this.string = string;
	}

	SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
	  return '' + this.string;
	};

	exports['default'] = SafeString;
	module.exports = exports['default'];

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(1)['default'];

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;
	exports.checkRevision = checkRevision;
	exports.template = template;
	exports.wrapProgram = wrapProgram;
	exports.resolvePartial = resolvePartial;
	exports.invokePartial = invokePartial;
	exports.noop = noop;

	var _utils = __webpack_require__(4);

	var Utils = _interopRequireWildcard(_utils);

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	var _base = __webpack_require__(3);

	function checkRevision(compilerInfo) {
	  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
	      currentRevision = _base.COMPILER_REVISION;

	  if (compilerRevision !== currentRevision) {
	    if (compilerRevision < currentRevision) {
	      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
	          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
	      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
	    } else {
	      // Use the embedded version info since the runtime doesn't know about this revision yet
	      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
	    }
	  }
	}

	function template(templateSpec, env) {
	  /* istanbul ignore next */
	  if (!env) {
	    throw new _exception2['default']('No environment passed to template');
	  }
	  if (!templateSpec || !templateSpec.main) {
	    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
	  }

	  templateSpec.main.decorator = templateSpec.main_d;

	  // Note: Using env.VM references rather than local var references throughout this section to allow
	  // for external users to override these as psuedo-supported APIs.
	  env.VM.checkRevision(templateSpec.compiler);

	  function invokePartialWrapper(partial, context, options) {
	    if (options.hash) {
	      context = Utils.extend({}, context, options.hash);
	      if (options.ids) {
	        options.ids[0] = true;
	      }
	    }

	    partial = env.VM.resolvePartial.call(this, partial, context, options);
	    var result = env.VM.invokePartial.call(this, partial, context, options);

	    if (result == null && env.compile) {
	      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
	      result = options.partials[options.name](context, options);
	    }
	    if (result != null) {
	      if (options.indent) {
	        var lines = result.split('\n');
	        for (var i = 0, l = lines.length; i < l; i++) {
	          if (!lines[i] && i + 1 === l) {
	            break;
	          }

	          lines[i] = options.indent + lines[i];
	        }
	        result = lines.join('\n');
	      }
	      return result;
	    } else {
	      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
	    }
	  }

	  // Just add water
	  var container = {
	    strict: function strict(obj, name) {
	      if (!(name in obj)) {
	        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
	      }
	      return obj[name];
	    },
	    lookup: function lookup(depths, name) {
	      var len = depths.length;
	      for (var i = 0; i < len; i++) {
	        if (depths[i] && depths[i][name] != null) {
	          return depths[i][name];
	        }
	      }
	    },
	    lambda: function lambda(current, context) {
	      return typeof current === 'function' ? current.call(context) : current;
	    },

	    escapeExpression: Utils.escapeExpression,
	    invokePartial: invokePartialWrapper,

	    fn: function fn(i) {
	      var ret = templateSpec[i];
	      ret.decorator = templateSpec[i + '_d'];
	      return ret;
	    },

	    programs: [],
	    program: function program(i, data, declaredBlockParams, blockParams, depths) {
	      var programWrapper = this.programs[i],
	          fn = this.fn(i);
	      if (data || depths || blockParams || declaredBlockParams) {
	        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
	      } else if (!programWrapper) {
	        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
	      }
	      return programWrapper;
	    },

	    data: function data(value, depth) {
	      while (value && depth--) {
	        value = value._parent;
	      }
	      return value;
	    },
	    merge: function merge(param, common) {
	      var obj = param || common;

	      if (param && common && param !== common) {
	        obj = Utils.extend({}, common, param);
	      }

	      return obj;
	    },

	    noop: env.VM.noop,
	    compilerInfo: templateSpec.compiler
	  };

	  function ret(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var data = options.data;

	    ret._setup(options);
	    if (!options.partial && templateSpec.useData) {
	      data = initData(context, data);
	    }
	    var depths = undefined,
	        blockParams = templateSpec.useBlockParams ? [] : undefined;
	    if (templateSpec.useDepths) {
	      if (options.depths) {
	        depths = context !== options.depths[0] ? [context].concat(options.depths) : options.depths;
	      } else {
	        depths = [context];
	      }
	    }

	    function main(context /*, options*/) {
	      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
	    }
	    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
	    return main(context, options);
	  }
	  ret.isTop = true;

	  ret._setup = function (options) {
	    if (!options.partial) {
	      container.helpers = container.merge(options.helpers, env.helpers);

	      if (templateSpec.usePartial) {
	        container.partials = container.merge(options.partials, env.partials);
	      }
	      if (templateSpec.usePartial || templateSpec.useDecorators) {
	        container.decorators = container.merge(options.decorators, env.decorators);
	      }
	    } else {
	      container.helpers = options.helpers;
	      container.partials = options.partials;
	      container.decorators = options.decorators;
	    }
	  };

	  ret._child = function (i, data, blockParams, depths) {
	    if (templateSpec.useBlockParams && !blockParams) {
	      throw new _exception2['default']('must pass block params');
	    }
	    if (templateSpec.useDepths && !depths) {
	      throw new _exception2['default']('must pass parent depths');
	    }

	    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
	  };
	  return ret;
	}

	function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
	  function prog(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var currentDepths = depths;
	    if (depths && context !== depths[0]) {
	      currentDepths = [context].concat(depths);
	    }

	    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
	  }

	  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

	  prog.program = i;
	  prog.depth = depths ? depths.length : 0;
	  prog.blockParams = declaredBlockParams || 0;
	  return prog;
	}

	function resolvePartial(partial, context, options) {
	  if (!partial) {
	    if (options.name === '@partial-block') {
	      partial = options.data['partial-block'];
	    } else {
	      partial = options.partials[options.name];
	    }
	  } else if (!partial.call && !options.name) {
	    // This is a dynamic partial that returned a string
	    options.name = partial;
	    partial = options.partials[partial];
	  }
	  return partial;
	}

	function invokePartial(partial, context, options) {
	  options.partial = true;
	  if (options.ids) {
	    options.data.contextPath = options.ids[0] || options.data.contextPath;
	  }

	  var partialBlock = undefined;
	  if (options.fn && options.fn !== noop) {
	    options.data = _base.createFrame(options.data);
	    partialBlock = options.data['partial-block'] = options.fn;

	    if (partialBlock.partials) {
	      options.partials = Utils.extend({}, options.partials, partialBlock.partials);
	    }
	  }

	  if (partial === undefined && partialBlock) {
	    partial = partialBlock;
	  }

	  if (partial === undefined) {
	    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
	  } else if (partial instanceof Function) {
	    return partial(context, options);
	  }
	}

	function noop() {
	  return '';
	}

	function initData(context, data) {
	  if (!data || !('root' in data)) {
	    data = data ? _base.createFrame(data) : {};
	    data.root = context;
	  }
	  return data;
	}

	function executeDecorators(fn, prog, container, depths, data, blockParams) {
	  if (fn.decorator) {
	    var props = {};
	    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
	    Utils.extend(prog, props);
	  }
	  return prog;
	}

/***/ },
/* 19 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/* global window */
	'use strict';

	exports.__esModule = true;

	exports['default'] = function (Handlebars) {
	  /* istanbul ignore next */
	  var root = typeof global !== 'undefined' ? global : window,
	      $Handlebars = root.Handlebars;
	  /* istanbul ignore next */
	  Handlebars.noConflict = function () {
	    if (root.Handlebars === Handlebars) {
	      root.Handlebars = $Handlebars;
	    }
	    return Handlebars;
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }
/******/ ])
});
;
/*!
 * Amplify 1.1.2
 *
 * Copyright 2011 - 2013 appendTo LLC. (http://appendto.com/team)
 * Dual licensed under the MIT or GPL licenses.
 * http://appendto.com/open-source-licenses
 *
 * http://amplifyjs.com
 */
(function( global, undefined ) {

var slice = [].slice,
	subscriptions = {};

var amplify = global.amplify = {
	publish: function( topic ) {
		if ( typeof topic !== "string" ) {
			throw new Error( "You must provide a valid topic to publish." );
		}

		var args = slice.call( arguments, 1 ),
			topicSubscriptions,
			subscription,
			length,
			i = 0,
			ret;

		if ( !subscriptions[ topic ] ) {
			return true;
		}

		topicSubscriptions = subscriptions[ topic ].slice();
		for ( length = topicSubscriptions.length; i < length; i++ ) {
			subscription = topicSubscriptions[ i ];
			ret = subscription.callback.apply( subscription.context, args );
			if ( ret === false ) {
				break;
			}
		}
		return ret !== false;
	},

	subscribe: function( topic, context, callback, priority ) {
		if ( typeof topic !== "string" ) {
			throw new Error( "You must provide a valid topic to create a subscription." );
		}

		if ( arguments.length === 3 && typeof callback === "number" ) {
			priority = callback;
			callback = context;
			context = null;
		}
		if ( arguments.length === 2 ) {
			callback = context;
			context = null;
		}
		priority = priority || 10;

		var topicIndex = 0,
			topics = topic.split( /\s/ ),
			topicLength = topics.length,
			added;
		for ( ; topicIndex < topicLength; topicIndex++ ) {
			topic = topics[ topicIndex ];
			added = false;
			if ( !subscriptions[ topic ] ) {
				subscriptions[ topic ] = [];
			}

			var i = subscriptions[ topic ].length - 1,
				subscriptionInfo = {
					callback: callback,
					context: context,
					priority: priority
				};

			for ( ; i >= 0; i-- ) {
				if ( subscriptions[ topic ][ i ].priority <= priority ) {
					subscriptions[ topic ].splice( i + 1, 0, subscriptionInfo );
					added = true;
					break;
				}
			}

			if ( !added ) {
				subscriptions[ topic ].unshift( subscriptionInfo );
			}
		}

		return callback;
	},

	unsubscribe: function( topic, context, callback ) {
		if ( typeof topic !== "string" ) {
			throw new Error( "You must provide a valid topic to remove a subscription." );
		}

		if ( arguments.length === 2 ) {
			callback = context;
			context = null;
		}

		if ( !subscriptions[ topic ] ) {
			return;
		}

		var length = subscriptions[ topic ].length,
			i = 0;

		for ( ; i < length; i++ ) {
			if ( subscriptions[ topic ][ i ].callback === callback ) {
				if ( !context || subscriptions[ topic ][ i ].context === context ) {
					subscriptions[ topic ].splice( i, 1 );
					
					// Adjust counter and length for removed item
					i--;
					length--;
				}
			}
		}
	}
};

}( this ) );

(function( amplify, undefined ) {

var store = amplify.store = function( key, value, options ) {
	var type = store.type;
	if ( options && options.type && options.type in store.types ) {
		type = options.type;
	}
	return store.types[ type ]( key, value, options || {} );
};

store.types = {};
store.type = null;
store.addType = function( type, storage ) {
	if ( !store.type ) {
		store.type = type;
	}

	store.types[ type ] = storage;
	store[ type ] = function( key, value, options ) {
		options = options || {};
		options.type = type;
		return store( key, value, options );
	};
};
store.error = function() {
	return "amplify.store quota exceeded";
};

var rprefix = /^__amplify__/;
function createFromStorageInterface( storageType, storage ) {
	store.addType( storageType, function( key, value, options ) {
		var storedValue, parsed, i, remove,
			ret = value,
			now = (new Date()).getTime();

		if ( !key ) {
			ret = {};
			remove = [];
			i = 0;
			try {
				// accessing the length property works around a localStorage bug
				// in Firefox 4.0 where the keys don't update cross-page
				// we assign to key just to avoid Closure Compiler from removing
				// the access as "useless code"
				// https://bugzilla.mozilla.org/show_bug.cgi?id=662511
				key = storage.length;

				while ( key = storage.key( i++ ) ) {
					if ( rprefix.test( key ) ) {
						parsed = JSON.parse( storage.getItem( key ) );
						if ( parsed.expires && parsed.expires <= now ) {
							remove.push( key );
						} else {
							ret[ key.replace( rprefix, "" ) ] = parsed.data;
						}
					}
				}
				while ( key = remove.pop() ) {
					storage.removeItem( key );
				}
			} catch ( error ) {}
			return ret;
		}

		// protect against name collisions with direct storage
		key = "__amplify__" + key;

		if ( value === undefined ) {
			storedValue = storage.getItem( key );
			parsed = storedValue ? JSON.parse( storedValue ) : { expires: -1 };
			if ( parsed.expires && parsed.expires <= now ) {
				storage.removeItem( key );
			} else {
				return parsed.data;
			}
		} else {
			if ( value === null ) {
				storage.removeItem( key );
			} else {
				parsed = JSON.stringify({
					data: value,
					expires: options.expires ? now + options.expires : null
				});
				try {
					storage.setItem( key, parsed );
				// quota exceeded
				} catch( error ) {
					// expire old data and try again
					store[ storageType ]();
					try {
						storage.setItem( key, parsed );
					} catch( error ) {
						throw store.error();
					}
				}
			}
		}

		return ret;
	});
}

// localStorage + sessionStorage
// IE 8+, Firefox 3.5+, Safari 4+, Chrome 4+, Opera 10.5+, iPhone 2+, Android 2+
for ( var webStorageType in { localStorage: 1, sessionStorage: 1 } ) {
	// try/catch for file protocol in Firefox and Private Browsing in Safari 5
	try {
		// Safari 5 in Private Browsing mode exposes localStorage
		// but doesn't allow storing data, so we attempt to store and remove an item.
		// This will unfortunately give us a false negative if we're at the limit.
		window[ webStorageType ].setItem( "__amplify__", "x" );
		window[ webStorageType ].removeItem( "__amplify__" );
		createFromStorageInterface( webStorageType, window[ webStorageType ] );
	} catch( e ) {}
}

// globalStorage
// non-standard: Firefox 2+
// https://developer.mozilla.org/en/dom/storage#globalStorage
if ( !store.types.localStorage && window.globalStorage ) {
	// try/catch for file protocol in Firefox
	try {
		createFromStorageInterface( "globalStorage",
			window.globalStorage[ window.location.hostname ] );
		// Firefox 2.0 and 3.0 have sessionStorage and globalStorage
		// make sure we default to globalStorage
		// but don't default to globalStorage in 3.5+ which also has localStorage
		if ( store.type === "sessionStorage" ) {
			store.type = "globalStorage";
		}
	} catch( e ) {}
}

// userData
// non-standard: IE 5+
// http://msdn.microsoft.com/en-us/library/ms531424(v=vs.85).aspx
(function() {
	// IE 9 has quirks in userData that are a huge pain
	// rather than finding a way to detect these quirks
	// we just don't register userData if we have localStorage
	if ( store.types.localStorage ) {
		return;
	}

	// append to html instead of body so we can do this from the head
	var div = document.createElement( "div" ),
		attrKey = "amplify";
	div.style.display = "none";
	document.getElementsByTagName( "head" )[ 0 ].appendChild( div );

	// we can't feature detect userData support
	// so just try and see if it fails
	// surprisingly, even just adding the behavior isn't enough for a failure
	// so we need to load the data as well
	try {
		div.addBehavior( "#default#userdata" );
		div.load( attrKey );
	} catch( e ) {
		div.parentNode.removeChild( div );
		return;
	}

	store.addType( "userData", function( key, value, options ) {
		div.load( attrKey );
		var attr, parsed, prevValue, i, remove,
			ret = value,
			now = (new Date()).getTime();

		if ( !key ) {
			ret = {};
			remove = [];
			i = 0;
			while ( attr = div.XMLDocument.documentElement.attributes[ i++ ] ) {
				parsed = JSON.parse( attr.value );
				if ( parsed.expires && parsed.expires <= now ) {
					remove.push( attr.name );
				} else {
					ret[ attr.name ] = parsed.data;
				}
			}
			while ( key = remove.pop() ) {
				div.removeAttribute( key );
			}
			div.save( attrKey );
			return ret;
		}

		// convert invalid characters to dashes
		// http://www.w3.org/TR/REC-xml/#NT-Name
		// simplified to assume the starting character is valid
		// also removed colon as it is invalid in HTML attribute names
		key = key.replace( /[^\-._0-9A-Za-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c-\u200d\u203f\u2040\u2070-\u218f]/g, "-" );
		// adjust invalid starting character to deal with our simplified sanitization
		key = key.replace( /^-/, "_-" );

		if ( value === undefined ) {
			attr = div.getAttribute( key );
			parsed = attr ? JSON.parse( attr ) : { expires: -1 };
			if ( parsed.expires && parsed.expires <= now ) {
				div.removeAttribute( key );
			} else {
				return parsed.data;
			}
		} else {
			if ( value === null ) {
				div.removeAttribute( key );
			} else {
				// we need to get the previous value in case we need to rollback
				prevValue = div.getAttribute( key );
				parsed = JSON.stringify({
					data: value,
					expires: (options.expires ? (now + options.expires) : null)
				});
				div.setAttribute( key, parsed );
			}
		}

		try {
			div.save( attrKey );
		// quota exceeded
		} catch ( error ) {
			// roll the value back to the previous value
			if ( prevValue === null ) {
				div.removeAttribute( key );
			} else {
				div.setAttribute( key, prevValue );
			}

			// expire old data and try again
			store.userData();
			try {
				div.setAttribute( key, parsed );
				div.save( attrKey );
			} catch ( error ) {
				// roll the value back to the previous value
				if ( prevValue === null ) {
					div.removeAttribute( key );
				} else {
					div.setAttribute( key, prevValue );
				}
				throw store.error();
			}
		}
		return ret;
	});
}() );

// in-memory storage
// fallback for all browsers to enable the API even if we can't persist data
(function() {
	var memory = {},
		timeout = {};

	function copy( obj ) {
		return obj === undefined ? undefined : JSON.parse( JSON.stringify( obj ) );
	}

	store.addType( "memory", function( key, value, options ) {
		if ( !key ) {
			return copy( memory );
		}

		if ( value === undefined ) {
			return copy( memory[ key ] );
		}

		if ( timeout[ key ] ) {
			clearTimeout( timeout[ key ] );
			delete timeout[ key ];
		}

		if ( value === null ) {
			delete memory[ key ];
			return null;
		}

		memory[ key ] = value;
		if ( options.expires ) {
			timeout[ key ] = setTimeout(function() {
				delete memory[ key ];
				delete timeout[ key ];
			}, options.expires );
		}

		return value;
	});
}() );

}( this.amplify = this.amplify || {} ) );

/*global amplify*/

(function( amplify, undefined ) {
'use strict';

function noop() {}
function isFunction( obj ) {
	return ({}).toString.call( obj ) === "[object Function]";
}

function async( fn ) {
	var isAsync = false;
	setTimeout(function() {
		isAsync = true;
	}, 1 );
	return function() {
		var that = this,
			args = arguments;
		if ( isAsync ) {
			fn.apply( that, args );
		} else {
			setTimeout(function() {
				fn.apply( that, args );
			}, 1 );
		}
	};
}

amplify.request = function( resourceId, data, callback ) {
	// default to an empty hash just so we can handle a missing resourceId
	// in one place
	var settings = resourceId || {};

	if ( typeof settings === "string" ) {
		if ( isFunction( data ) ) {
			callback = data;
			data = {};
		}
		settings = {
			resourceId: resourceId,
			data: data || {},
			success: callback
		};
	}

	var request = { abort: noop },
		resource = amplify.request.resources[ settings.resourceId ],
		success = settings.success || noop,
		error = settings.error || noop;

	settings.success = async( function( data, status ) {
		status = status || "success";
		amplify.publish( "request.success", settings, data, status );
		amplify.publish( "request.complete", settings, data, status );
		success( data, status );
	});

	settings.error = async( function( data, status ) {
		status = status || "error";
		amplify.publish( "request.error", settings, data, status );
		amplify.publish( "request.complete", settings, data, status );
		error( data, status );
	});

	if ( !resource ) {
		if ( !settings.resourceId ) {
			throw "amplify.request: no resourceId provided";
		}
		throw "amplify.request: unknown resourceId: " + settings.resourceId;
	}

	if ( !amplify.publish( "request.before", settings ) ) {
		settings.error( null, "abort" );
		return;
	}

	amplify.request.resources[ settings.resourceId ]( settings, request );
	return request;
};

amplify.request.types = {};
amplify.request.resources = {};
amplify.request.define = function( resourceId, type, settings ) {
	if ( typeof type === "string" ) {
		if ( !( type in amplify.request.types ) ) {
			throw "amplify.request.define: unknown type: " + type;
		}

		settings.resourceId = resourceId;
		amplify.request.resources[ resourceId ] =
			amplify.request.types[ type ]( settings );
	} else {
		// no pre-processor or settings for one-off types (don't invoke)
		amplify.request.resources[ resourceId ] = type;
	}
};

}( amplify ) );


(function( amplify, $, undefined ) {
'use strict';

var xhrProps = [ "status", "statusText", "responseText", "responseXML", "readyState" ],
		rurlData = /\{([^\}]+)\}/g;

amplify.request.types.ajax = function( defnSettings ) {
	defnSettings = $.extend({
		type: "GET"
	}, defnSettings );

	return function( settings, request ) {
		var xhr, handleResponse,
			url = defnSettings.url,
			abort = request.abort,
			ajaxSettings = $.extend( true, {}, defnSettings, { data: settings.data } ),
			aborted = false,
			ampXHR = {
				readyState: 0,
				setRequestHeader: function( name, value ) {
					return xhr.setRequestHeader( name, value );
				},
				getAllResponseHeaders: function() {
					return xhr.getAllResponseHeaders();
				},
				getResponseHeader: function( key ) {
					return xhr.getResponseHeader( key );
				},
				overrideMimeType: function( type ) {
					return xhr.overrideMimeType( type );
				},
				abort: function() {
					aborted = true;
					try {
						xhr.abort();
					// IE 7 throws an error when trying to abort
					} catch( e ) {}
					handleResponse( null, "abort" );
				},
				success: function( data, status ) {
					settings.success( data, status );
				},
				error: function( data, status ) {
					settings.error( data, status );
				}
			};

		handleResponse = function( data, status ) {
			$.each( xhrProps, function( i, key ) {
				try {
					ampXHR[ key ] = xhr[ key ];
				} catch( e ) {}
			});
			// Playbook returns "HTTP/1.1 200 OK"
			// TODO: something also returns "OK", what?
			if ( /OK$/.test( ampXHR.statusText ) ) {
				ampXHR.statusText = "success";
			}
			if ( data === undefined ) {
				// TODO: add support for ajax errors with data
				data = null;
			}
			if ( aborted ) {
				status = "abort";
			}
			if ( /timeout|error|abort/.test( status ) ) {
				ampXHR.error( data, status );
			} else {
				ampXHR.success( data, status );
			}
			// avoid handling a response multiple times
			// this can happen if a request is aborted
			// TODO: figure out if this breaks polling or multi-part responses
			handleResponse = $.noop;
		};

		amplify.publish( "request.ajax.preprocess",
			defnSettings, settings, ajaxSettings, ampXHR );

		$.extend( ajaxSettings, {
			isJSONP: function () {
				return (/jsonp/gi).test(this.dataType);
			},
			cacheURL: function () {
				if (!this.isJSONP()) {
					return this.url;
				}

				var callbackName = 'callback';

				// possible for the callback function name to be overridden
				if (this.hasOwnProperty('jsonp')) {
					if (this.jsonp !== false) {
						callbackName = this.jsonp;
					} else {
						if (this.hasOwnProperty('jsonpCallback')) {
							callbackName = this.jsonpCallback;
						}
					}
				}

				// search and replace callback parameter in query string with empty string
				var callbackRegex = new RegExp('&?' + callbackName + '=[^&]*&?', 'gi');
				return this.url.replace(callbackRegex, '');
			},
			success: function( data, status ) {
				handleResponse( data, status );
			},
			error: function( _xhr, status ) {
				handleResponse( null, status );
			},
			beforeSend: function( _xhr, _ajaxSettings ) {
				xhr = _xhr;
				ajaxSettings = _ajaxSettings;
				var ret = defnSettings.beforeSend ?
					defnSettings.beforeSend.call( this, ampXHR, ajaxSettings ) : true;
				return ret && amplify.publish( "request.before.ajax",
					defnSettings, settings, ajaxSettings, ampXHR );
			}
		});

		// cache all JSONP requests
		if (ajaxSettings.cache && ajaxSettings.isJSONP()) {
			$.extend(ajaxSettings, {
				cache: true
			});
		}

		$.ajax( ajaxSettings );

		request.abort = function() {
			ampXHR.abort();
			abort.call( this );
		};
	};
};



amplify.subscribe( "request.ajax.preprocess", function( defnSettings, settings, ajaxSettings ) {
	var mappedKeys = [],
		data = ajaxSettings.data;

	if ( typeof data === "string" ) {
		return;
	}

	data = $.extend( true, {}, defnSettings.data, data );

	ajaxSettings.url = ajaxSettings.url.replace( rurlData, function ( m, key ) {
		if ( key in data ) {
			mappedKeys.push( key );
			return data[ key ];
		}
	});

	// We delete the keys later so duplicates are still replaced
	$.each( mappedKeys, function ( i, key ) {
		delete data[ key ];
	});

	ajaxSettings.data = data;
});



amplify.subscribe( "request.ajax.preprocess", function( defnSettings, settings, ajaxSettings ) {
	var data = ajaxSettings.data,
		dataMap = defnSettings.dataMap;

	if ( !dataMap || typeof data === "string" ) {
		return;
	}

	if ( $.isFunction( dataMap ) ) {
		ajaxSettings.data = dataMap( data );
	} else {
		$.each( defnSettings.dataMap, function( orig, replace ) {
			if ( orig in data ) {
				data[ replace ] = data[ orig ];
				delete data[ orig ];
			}
		});
		ajaxSettings.data = data;
	}
});



var cache = amplify.request.cache = {
	_key: function( resourceId, url, data ) {
		data = url + data;
		var length = data.length,
			i = 0;

		/*jshint bitwise:false*/
		function chunk() {
			return data.charCodeAt( i++ ) << 24 |
				data.charCodeAt( i++ ) << 16 |
				data.charCodeAt( i++ ) << 8 |
				data.charCodeAt( i++ ) << 0;
		}

		var checksum = chunk();
		while ( i < length ) {
			checksum ^= chunk();
		}
		/*jshint bitwise:true*/

		return "request-" + resourceId + "-" + checksum;
	},

	_default: (function() {
		var memoryStore = {};
		return function( resource, settings, ajaxSettings, ampXHR ) {
			// data is already converted to a string by the time we get here
			var cacheKey = cache._key( settings.resourceId,
					ajaxSettings.cacheURL(), ajaxSettings.data ),
				duration = resource.cache;

			if ( cacheKey in memoryStore ) {
				ampXHR.success( memoryStore[ cacheKey ] );
				return false;
			}
			var success = ampXHR.success;
			ampXHR.success = function( data ) {
				memoryStore[ cacheKey ] = data;
				if ( typeof duration === "number" ) {
					setTimeout(function() {
						delete memoryStore[ cacheKey ];
					}, duration );
				}
				success.apply( this, arguments );
			};
		};
	}())
};

if ( amplify.store ) {
	$.each( amplify.store.types, function( type ) {
		cache[ type ] = function( resource, settings, ajaxSettings, ampXHR ) {
			var cacheKey = cache._key( settings.resourceId,
					ajaxSettings.cacheURL(), ajaxSettings.data ),
				cached = amplify.store[ type ]( cacheKey );

			if ( cached ) {
				ajaxSettings.success( cached );
				return false;
			}
			var success = ampXHR.success;
			ampXHR.success = function( data ) {
				amplify.store[ type ]( cacheKey, data, { expires: resource.cache.expires } );
				success.apply( this, arguments );
			};
		};
	});
	cache.persist = cache[ amplify.store.type ];
}

amplify.subscribe( "request.before.ajax", function( resource ) {
	var cacheType = resource.cache;
	if ( cacheType ) {
		// normalize between objects and strings/booleans/numbers
		cacheType = cacheType.type || cacheType;
		return cache[ cacheType in cache ? cacheType : "_default" ]
			.apply( this, arguments );
	}
});



amplify.request.decoders = {
	// http://labs.omniti.com/labs/jsend
	jsend: function( data, status, ampXHR, success, error ) {
		if ( data.status === "success" ) {
			success( data.data );
		} else if ( data.status === "fail" ) {
			error( data.data, "fail" );
		} else if ( data.status === "error" ) {
			delete data.status;
			error( data, "error" );
		} else {
			error( null, "error" );
		}
	}
};

amplify.subscribe( "request.before.ajax", function( resource, settings, ajaxSettings, ampXHR ) {
	var _success = ampXHR.success,
		_error = ampXHR.error,
		decoder = $.isFunction( resource.decoder ) ?
			resource.decoder :
			resource.decoder in amplify.request.decoders ?
				amplify.request.decoders[ resource.decoder ] :
				amplify.request.decoders._default;

	if ( !decoder ) {
		return;
	}

	function success( data, status ) {
		_success( data, status );
	}
	function error( data, status ) {
		_error( data, status );
	}
	ampXHR.success = function( data, status ) {
		decoder( data, status, ampXHR, success, error );
	};
	ampXHR.error = function( data, status ) {
		decoder( data, status, ampXHR, success, error );
	};
});

}( amplify, jQuery ) );

this["Handlebars"] = this["Handlebars"] || {};
this["Handlebars"]["templates"] = this["Handlebars"]["templates"] || {};
this["Handlebars"]["templates"]["colorSnippet"] = Handlebars.template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3="function", alias4=container.escapeExpression;

  return "<div class=\"color-bloop-item\">\n   <div class=\"color-bloop\" style=\"background-color: #"
    + alias4(((helper = (helper = helpers.hexValue || (depth0 != null ? depth0.hexValue : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"hexValue","hash":{},"data":data}) : helper)))
    + "\"></div>\n   <div class=\"color-bloop-text\">"
    + alias4(((helper = (helper = helpers.colorName || (depth0 != null ? depth0.colorName : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"colorName","hash":{},"data":data}) : helper)))
    + ": #"
    + alias4(((helper = (helper = helpers.hexValue || (depth0 != null ? depth0.hexValue : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"hexValue","hash":{},"data":data}) : helper)))
    + ",</div>\n</div>\n";
},"useData":true});
(function() {
   var App = {
      init: function () {
         _.each(App.Modules, function(key, value) {
            App.Modules[value].init().events();
         });
      }
   };

   window.App = App;
})();




var AjaxRoute = (function() {

   var ro = {
      url: "",
      name: "",
      type: "",
      data: {},
      callType: "",
      userData: {},
      useQueryParams: false,
      extraAjaxParams: null,
   };

   var mergeParams = function(response, userData) {
      response = _.isString(response) ? JSON.parse(response) : _.isArray(response) ? {responseArray: response} : response;

      return _.extend(response, userData);
   };

   var sendAjaxRequest = function() {
      $.ajax(paramSetup(ro.extraAjaxParams))
         .done(function(response) {
            var params = mergeParams(response, ro.userData);

            Events.publish(ro.name+"/success", params);
         })
         .fail(function(response) {
            var params = mergeParams(response, ro.userData);

            Events.publish(ro.name+"/fail", params);
         })
         .always(function(response) {
            var params = mergeParams(response, ro.userData);

            Events.publish(ro.name+"/complete", params);
         });
   };

   var paramSetup = function(mergeParams) {
      var params  = {};

      if (ro.type == "get" || ro.useQueryParams) {
         params = {
            type: ro.type,
            url: ro.url
         };
      } else {
         params = {
            type: ro.type,
            url: ro.url,
            dataType: "json",
            contentType: "application/json",
            processData: false,
            data: ro.data
         };
      }

      if (! _.isNull(mergeParams)) {
         return _.extend(params, mergeParams);
      }

      return params;
   };

   return {
      as: function(type, useQueryParams, extraAjaxParams) {
         ro.type = type;
         ro.useQueryParams = _.isUndefined(useQueryParams) || ! _.isBoolean(useQueryParams) ? false : useQueryParams;
         ro.extraAjaxParams = extraAjaxParams || null;

         return this;
      },

      to: function(url, data) {
         ro.name = Utils.generateEventName();
         ro.url = url;
         ro.data = JSON.stringify(data);

         return this;
      },

      on: function(responseTypes, context, userData) {
         ro.userData = userData || {};

         _.each(responseTypes, function(value, key) {
            Events.subscribe(ro.name+"/"+key, value, context);
         });

         sendAjaxRequest();
         return false;
      }
   };
}());

var Binder = (function() {
   return {
      asLoad: function(eo) {
         if (eo.bindEvent === "unload") {
            $(document).unload(function() {
               PubSub.publish(eo.asEventName, eo.userData);
            });

            return false;
         }

         if (eo.context == window) {
            $(window).load(function() {
               PubSub.publish(eo.asEventName, eo.userData);
            });

            return false;
         }

         $(document).ready(function() {
            PubSub.publish(eo.asEventName, eo.userData);
         });

         return false;
      },

      asKeyboard: function(eo) {
         var keyType = (eo.bindEvent === "key" || eo.bindEvent === "keydown") ? "keydown" : eo.bindEvent;
         $(document).on(keyType, eo.selector, function(e) {
            var charCode = (e.which ? e.which : e.keyCode);
            _.each(eo.keyPress, function(element, index, list){
               if (element === charCode) {
                  PubSub.publish(eo.asEventName, _.extend({
                     eventElement: $(eo.selector +":focus") || null
                  }, eo.userData));
               }
            });
         });
      },

      asTyping: function(eo) {
         $(document).on("keyup", eo.selector, function(e) {
            PubSub.publish(eo.asEventName, _.extend({
               eventElement: $(eo.selector +":focus") || null
            }, eo.userData));
         });
      },

      asDocument: function(eo) {
         $(document).on(eo.bindEvent, eo.selector, function(e) {

            PubSub.publish(eo.asEventName, _.extend({
               eventElement: $(this)
            }, eo.userData));

            e.preventDefault();
         });

      },

      asWindow: function(eo) {
         $(window).on(eo.bindEvent, eo.selector, function(e) {
            PubSub.publish(eo.asEventName, _.extend({
               eventElement: $(this)
            }, eo.userData));
            e.preventDefault();
         });

         return false;
      },

      asMouse: function(eo) {
         return this.asDocument(eo);
      },

      asForm: function(eo) {
         return this.asDocument(eo);
      },

      generic: function(eo) {
         $(document).on(eo.bindEvent, eo.selector, function(e) {
            PubSub.publish(eo.asEventName, _.extend({
               eventElement: $(this)
            }, eo.userData));
         });
      }
    };
}());

var Events = (function() {
   var eventObject = {
      context:          undefined,
      keyPress:         undefined,
      selector:         undefined,
      whereKey:         undefined,
      userData:         undefined,
      bindEvent:        undefined,
      whereType:        undefined,
      whereValue:       undefined,
      asEventName:      undefined,
      bindEventContext: undefined
   };

   var triggers = {
      pub: function(eo) {
         if (_.isUndefined(eo.whereKey) || eo.whereKey.length <= 0) {
            bindEventAs(eo);
         } else {
            var whereKey   = eo.whereKey.shift();
            var whereValue = eo.whereValue.shift();
            var whereType  = eo.whereType.shift();
            var attribute  = _.isNull(whereKey.match(/\[(.*?)\]/)) ? "class" : whereKey.match(/\[(.*?)\]/)[1];

            if (whereType == "equal" && s.include($(whereKey).attr(attribute), whereValue)) {
               this.pub(eo);
            }

            if (whereType == "not-equal" && ! s.include($(whereKey).attr(attribute), whereValue)) {
               this.pub(eo);
            }

            return false;
         }
      },
      sub: function(eo, funcName) {
         PubSub.subscribe(eo.asEventName, function(data) {
            if (_.isArray(funcName)) {
               _.each(funcName, function(userFunc) {
                  userFunc.call(eo.context, data);
               });
               return false;
            }
            return funcName.call(eo.context, data);
         });
      }
   };

   var bindEventAs = function(eo) {
      if (eo.bindEvent === "ready" || eo.bindEvent === "load" || eo.bindEvent === "unload") {
         return Binder.asLoad(eo);
      }

      if (eo.bindEvent.indexOf("key") === 0) {
         return Binder.asKeyboard(eo);
      }

      if (eo.bindEvent === "resize" || eo.bindEvent === "scroll") {
         return Binder.asWindow(eo);
      }

      if (eo.bindEvent.indexOf("mouse") === 0 || eo.bindEvent === "hover" || eo.bindEvent === "click" || eo.bindEvent === "dblclick") {
         return Binder.asMouse(eo);
      }

      if (eo.bindEvent.indexOf("focus") === 0 || eo.bindEvent === "blur" || eo.bindEvent === "change" || eo.bindEvent === "select" || eo.bindEvent === "submit") {
         return Binder.asForm(eo);
      }

      if (eo.bindEvent === "typing") {
         return Binder.asTyping(eo);
      }

      // we don't kow wtf you're trying to bind so
      // lets do something and see what happens
      return Binder.generic(eo);
   };

   return {

      bind: function(bindEvent, selector, key) {
         eventObject.bindEvent = bindEvent;
         eventObject.selector  = _.isUndefined(selector) ? null : selector;
         eventObject.keyPress  = _.isUndefined(key) ? null : key;

         if (eventObject.bindEvent.indexOf("key") === 0 && _.isNull(eventObject.keyPress)) {
            eventObject.keyPress = eventObject.selector;
            eventObject.selector = null;
         }

         return this;
      },

      where: function(key, value) {
         this.whereType("equal", key, _.isUndefined(value) ? key : value);

         return this;
      },

      whereNot: function(key, value) {
         this.whereType("not-equal", key, _.isUndefined(value) ? key : value);

         return this;
      },

      whereType: function(type, key, value) {
         if (_.isUndefined(eventObject.whereType)) {
            eventObject.whereType = [];
            eventObject.whereKey = [];
            eventObject.whereValue = [];
         }

         eventObject.whereType.push(type);
         eventObject.whereKey.push(key);
         eventObject.whereValue.push(value);
      },

      as: function(eventName) {
         eventObject.asEventName = eventName;

         return this;
      },

      to: function(funcName, context, userData) {
         eventObject.asEventName = Utils.generateEventName(eventObject.asEventName);
         eventObject.userData    = _.isUndefined(userData) ? {} : userData;
         eventObject.context     = _.isUndefined(context) ? window : context;
         triggers.pub(eventObject);

         if (_.isFunction(funcName) ||  _.isArray(funcName)) {
            triggers.sub(eventObject, funcName);
         }

         eventObject = {};
         return false;
      },

      publish: function(eventName, userData) {
         PubSub.publish(eventName, userData);

      },

      subscribe: function(eventName, funcName, context) {
         PubSub.subscribe(eventName, function(data) {
            return funcName.call(context, data);
         });
      }
   };
}());

var Mapper = (function() {

   return {
      collection: function(data, mapperFunc) {
         if (! _.isArray(data)) {
            data = [data];
         }

         return _.map(data, function(item) {
            return mapperFunc(item);
         });
      },

      item: function(data, mapperFunc) {
         if (_.isArray(data)) {
            throw "when calling Mapper.item() the data var needs to be a single object, not an array, if you have an array, you need to use Mapper.collection()";
            return false;
         }

         return mapperFunc(data);
      }
   };
}());

var PubSub = amplify;

var Utils = (function(){

   return {
      generateUUID: function() {
         var d = Date.now();
         var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = (d + Math.random()*16)%16 | 0;
            d = Math.floor(d/16);
            return (c=='x' ? r : (r&0x3|0x8)).toString(16);
         });

         return uuid;
      },
      generateEventName: function(asEventName) {
         if (_.isUndefined(asEventName)) {
            return "app/event/" + Utils.generateUUID();
         }

         return asEventName;
      }
   };
}());

App.Helpers = App.Helpers || {};
App.Helpers.colorList = {
   "000000": "black",
   "000080": "navy-blue",
   "0000c8": "dark-blue",
   "0000ff": "blue",
   "000741": "stratos",
   "001b1c": "swamp",
   "002387": "resolution-blue",
   "002900": "deep-fir",
   "002e20": "burnham",
   "002fa7": "international-klein-blue",
   "003153": "prussian-blue",
   "003366": "dark-midnight-blue",
   "003399": "smalt",
   "003532": "deep-teal",
   "003e40": "cyprus",
   "004620": "kaitoke-green",
   "0047ab": "cobalt",
   "004816": "crusoe",
   "004950": "sherpa-blue",
   "0056a7": "endeavour",
   "00581a": "camarone",
   "0066cc": "science-blue",
   "0066ff": "blue-ribbon",
   "00755e": "tropical-rain-forest",
   "0076a3": "allports",
   "007ba7": "cerulean",
   "007ec7": "lochmara",
   "007fff": "azure",
   "008080": "teal",
   "0095b6": "honolulu-blue",
   "009dc4": "pacific-blue",
   "00a693": "persian-green",
   "00a86b": "jade",
   "00cc99": "caribbean-green",
   "00cccc": "robin-egg-blue",
   "00ff00": "lime-web",
   "00ff7f": "guppie-green",
   "00ffff": "waterspout",
   "010d1a": "blue-charcoal",
   "011635": "midnight",
   "011d13": "holly",
   "012731": "daintree",
   "01361c": "cardin-green",
   "01371a": "county-green",
   "013e62": "astronaut-blue",
   "013f6a": "regal-blue",
   "014b43": "aqua-deep",
   "015e85": "orient",
   "016162": "blue-stone",
   "016d39": "fun-green",
   "01796f": "pine-green",
   "017987": "blue-lagoon",
   "01826b": "deep-sea",
   "01a368": "green-haze",
   "022d15": "english-holly",
   "02402c": "sherwood-green",
   "02478e": "congress-blue",
   "024e46": "evening-sea",
   "026395": "bahama-blue",
   "02866f": "observatory",
   "02a4d3": "cerulean",
   "03163c": "tangaroa",
   "032b52": "green-vogue",
   "036a6e": "mosque",
   "041004": "midnight-moss",
   "041322": "black-pearl",
   "042e4c": "blue-whale",
   "044022": "zuccini",
   "044259": "teal-blue",
   "051040": "deep-cove",
   "051657": "gulf-blue",
   "055989": "venice-blue",
   "056f57": "watercourse",
   "062a78": "catalina-blue",
   "063537": "tiber",
   "069b81": "gossamer",
   "06a189": "niagara",
   "073a50": "tarawera",
   "080110": "jaguar",
   "081910": "black-bean",
   "082567": "deep-sapphire",
   "088370": "elf-green",
   "08e8de": "bright-turquoise",
   "092256": "downriver",
   "09230f": "palm-green",
   "09255d": "madison",
   "093624": "bottle-green",
   "095859": "deep-sea-green",
   "097f4b": "salem",
   "0a001c": "black-russian",
   "0a480d": "dark-fern",
   "0a6906": "japanese-laurel",
   "0a6f75": "atoll",
   "0b0b0b": "cod-gray",
   "0b0f08": "marshland",
   "0b1107": "gordons-green",
   "0b1304": "black-forest",
   "0b6207": "san-felix",
   "0bda51": "malachite",
   "0c0b1d": "ebony",
   "0c0d0f": "woodsmoke",
   "0c1911": "racing-green",
   "0c7a79": "surfie-green",
   "0c8990": "blue-chill",
   "0d0332": "black-rock",
   "0d1117": "bunker",
   "0d1c19": "aztec",
   "0d2e1c": "bush",
   "0e0e18": "cinder",
   "0e2a30": "firefly",
   "0f2d9e": "torea-bay",
   "10121d": "vulcan",
   "101405": "green-waterloo",
   "105852": "eden",
   "110c6c": "arapawa",
   "120a8f": "ultramarine",
   "123447": "elephant",
   "126b40": "jewel",
   "130000": "diesel",
   "130a06": "asphalt",
   "13264d": "blue-zodiac",
   "134f19": "parsley",
   "140600": "nero",
   "1450aa": "tory-blue",
   "151f4c": "bunting",
   "1560bd": "denim",
   "15736b": "genoa",
   "161928": "mirage",
   "161d10": "hunter-green",
   "162a40": "big-stone",
   "163222": "celtic",
   "16322c": "timber-green",
   "163531": "gable-green",
   "171f04": "pine-tree",
   "175579": "chathams-blue",
   "182d09": "deep-forest-green",
   "18587a": "blumine",
   "19330e": "palm-leaf",
   "193751": "nile-blue",
   "1959a8": "fun-blue",
   "1a1a68": "lucky-point",
   "1ab385": "mountain-meadow",
   "1b0245": "tolopea",
   "1b1035": "haiti",
   "1b127b": "deep-koamaru",
   "1b1404": "acadia",
   "1b2f11": "seaweed",
   "1b3162": "biscay",
   "1b659d": "matisse",
   "1c1208": "crowshead",
   "1c1e13": "rangoon-green",
   "1c39bb": "persian-blue",
   "1c402e": "everglade",
   "1c7c7d": "elm",
   "1d6142": "green-pea",
   "1e0f04": "creole",
   "1e1609": "karaka",
   "1e1708": "el-paso",
   "1e385b": "cello",
   "1e433c": "te-papa-green",
   "1e90ff": "dodger-blue",
   "1e9ab0": "eastern-blue",
   "1f120f": "night-rider",
   "1fc2c2": "java",
   "20208d": "jacksons-purple",
   "202e54": "cloud-burst",
   "204852": "blue-dianne",
   "211a0e": "eternity",
   "220878": "deep-blue",
   "228b22": "forest-green-web",
   "233418": "mallard",
   "240a40": "violet",
   "240c02": "kilamanjaro",
   "242a1d": "log-cabin",
   "242e16": "black-olive",
   "24500f": "green-house",
   "251607": "graphite",
   "251706": "cannon-black",
   "251f4f": "port-gore",
   "25272c": "shark",
   "25311c": "green-kelp",
   "2596d1": "curious-blue",
   "260368": "paua",
   "26056a": "paris-m",
   "261105": "wood-bark",
   "261414": "gondola",
   "262335": "steel-gray",
   "26283b": "ebony-clay",
   "273a81": "bay-of-many",
   "27504b": "plantation",
   "278a5b": "eucalyptus",
   "281e15": "oil",
   "283a77": "astronaut",
   "286acd": "mariner",
   "290c5e": "violent-violet",
   "292130": "bastille",
   "292319": "zeus",
   "292937": "charade",
   "297b9a": "jelly-bean",
   "29ab87": "jungle-green",
   "2a0359": "cherry-pie",
   "2a140e": "coffee-bean",
   "2a2630": "baltic-sea",
   "2a380b": "turtle-green",
   "2a52be": "cerulean-blue",
   "2b0202": "sepia-black",
   "2b194f": "valhalla",
   "2b3228": "heavy-metal",
   "2c0e8c": "blue-gem",
   "2c1632": "revolver",
   "2c2133": "bleached-cedar",
   "2c8c84": "lochinvar",
   "2d2510": "mikado",
   "2d383a": "outer-space",
   "2d569b": "st-tropaz",
   "2e0329": "jacaranda",
   "2e1905": "jacko-bean",
   "2e3222": "rangitoto",
   "2e3f62": "rhino",
   "2e8b57": "sea-green",
   "2ebfd4": "scooter",
   "2f270e": "onion",
   "2f3cb3": "governor-bay",
   "2f519e": "sapphire",
   "2f5a57": "spectra",
   "2f6168": "casal",
   "300529": "melanzane",
   "301f1e": "cocoa-brown",
   "302a0f": "woodrush",
   "304b6a": "san-juan",
   "30d5c8": "turquoise",
   "311c17": "eclipse",
   "314459": "pickled-bluewood",
   "315ba1": "azure",
   "31728d": "calypso",
   "317d82": "paradiso",
   "32127a": "persian-indigo",
   "32293a": "blackcurrant",
   "323232": "mine-shaft",
   "325d52": "stromboli",
   "327c14": "bilbao",
   "327da0": "astral",
   "33036b": "christalle",
   "33292f": "thunder",
   "33cc99": "shamrock",
   "341515": "tamarind",
   "350036": "mardi-gras",
   "350e42": "valentino",
   "350e57": "jagger",
   "353542": "tuna",
   "354e8c": "chambray",
   "363050": "martinique",
   "363534": "tuatara",
   "363c0d": "waiouru",
   "36747d": "ming",
   "368716": "la-palma",
   "370202": "chocolate",
   "371d09": "clinker",
   "37290e": "brown-tumbleweed",
   "373021": "birch",
   "377475": "oracle",
   "380474": "blue-diamond",
   "381a51": "grape",
   "383533": "dune",
   "384555": "oxford-blue",
   "384910": "clover",
   "394851": "limed-spruce",
   "396413": "dell",
   "3a0020": "toledo",
   "3a2010": "sambuca",
   "3a2a6a": "jacarta",
   "3a686c": "william",
   "3a6a47": "killarney",
   "3ab09e": "keppel",
   "3b000b": "temptress",
   "3b0910": "aubergine",
   "3b1f1f": "jon",
   "3b2820": "treehouse",
   "3b7a57": "amazon",
   "3b91b4": "boston-blue",
   "3c0878": "windsor",
   "3c1206": "rebel",
   "3c1f76": "meteorite",
   "3c2005": "dark-ebony",
   "3c3910": "camouflage",
   "3c4151": "bright-gray",
   "3c4443": "cape-cod",
   "3c493a": "lunar-green",
   "3d0c02": "bean-",
   "3d2b1f": "bistre",
   "3d7d52": "goblin",
   "3e0480": "kingfisher-daisy",
   "3e1c14": "cedar",
   "3e2b23": "english-walnut",
   "3e2c1c": "black-marlin",
   "3e3a44": "ship-gray",
   "3eabbf": "pelorous",
   "3f2109": "bronze",
   "3f2500": "cola",
   "3f3002": "madras",
   "3f307f": "minsk",
   "3f4c3a": "cabbage-pont",
   "3f583b": "tom-thumb",
   "3f5d53": "mineral-green",
   "3fc1aa": "puerto-rico",
   "3fff00": "harlequin",
   "401801": "brown-pod",
   "40291d": "cork",
   "403b38": "masala",
   "403d19": "thatch-green",
   "405169": "fiord",
   "40826d": "viridian",
   "40a860": "chateau-green",
   "410056": "ripe-plum",
   "411f10": "paco",
   "412010": "deep-oak",
   "413c37": "merlin",
   "414257": "gun-powder",
   "414c7d": "east-bay",
   "4169e1": "royal-blue-web",
   "41aa78": "ocean-green",
   "420303": "burnt-maroon",
   "423921": "lisbon-brown",
   "427977": "faded-jade",
   "431560": "scarlet-gum",
   "433120": "iroko",
   "433e37": "armadillo",
   "434c59": "river-bed",
   "436a0d": "green-leaf",
   "44012d": "barossa",
   "441d00": "morocco-brown",
   "444954": "mako",
   "454936": "kelp",
   "456cac": "san-marino",
   "45b1e8": "picton-blue",
   "460b41": "loulou",
   "462425": "crater-brown",
   "465945": "gray-asparagus",
   "4682b4": "steel-blue",
   "480404": "rustic-red",
   "480607": "bulgarian-rose",
   "480656": "clairvoyant",
   "481c1c": "cocoa-bean",
   "483131": "woody-brown",
   "483c32": "dark-taupe",
   "49170c": "van-cleef",
   "492615": "brown-derby",
   "49371b": "metallic-bronze",
   "495400": "verdun-green",
   "496679": "blue-bayoux",
   "497183": "bismark",
   "4a2a04": "bracken",
   "4a3004": "deep-bronze",
   "4a3c30": "mondo",
   "4a4244": "tundora",
   "4a444b": "gravel",
   "4a4e5a": "trout",
   "4b0082": "indigo-web",
   "4b5d52": "nandor",
   "4c3024": "saddle",
   "4c4f56": "abbey",
   "4d0135": "blackberry",
   "4d0a18": "cab-sav",
   "4d1e01": "indian-tan",
   "4d282d": "cowboy",
   "4d282e": "livid-brown",
   "4d3833": "rock",
   "4d3d14": "punga",
   "4d400f": "bronzetone",
   "4d5328": "woodland",
   "4e0606": "mahogany",
   "4e2a5a": "bossanova",
   "4e3b41": "matterhorn",
   "4e420c": "bronze-olive",
   "4e4562": "mulled-wine",
   "4e6649": "axolotl",
   "4e7f9e": "wedgewood",
   "4eabd1": "shakespeare",
   "4f1c70": "honey-flower",
   "4f2398": "daisy-bush",
   "4f69c6": "indigo",
   "4f7942": "fern-green",
   "4f9d5d": "fruit-salad",
   "4fa83d": "apple",
   "504351": "mortar",
   "507096": "kashmir-blue",
   "507672": "cutty-sark",
   "50c878": "paris-green",
   "514649": "emperor",
   "516e3d": "chalet-green",
   "517c66": "como",
   "51808f": "smalt-blue",
   "52001f": "castro",
   "520c17": "maroon-oak",
   "523c94": "gigas",
   "533455": "voodoo",
   "534491": "victoria",
   "53824b": "hippie-green",
   "541012": "heath",
   "544333": "judge-gray",
   "54534d": "fuscous-gray",
   "549019": "vida-loca",
   "55280c": "cioccolato",
   "555b10": "saratoga",
   "556d56": "finlandia",
   "5590d9": "havelock-blue",
   "56b4be": "fountain-blue",
   "578363": "spring-leaves",
   "583401": "saddle-brown",
   "585562": "scarpa-flow",
   "587156": "cactus",
   "589aaf": "hippie-blue",
   "591d35": "wine-berry",
   "592804": "brown-bramble",
   "593737": "congo-brown",
   "594433": "millbrook",
   "5a6e9c": "waikawa-gray",
   "5a87a0": "horizon",
   "5b3013": "jambalaya",
   "5c0120": "bordeaux",
   "5c0536": "mulberry-wood",
   "5c2e01": "carnaby-tan",
   "5c5d75": "comet",
   "5d1e0f": "redwood",
   "5d4c51": "don-juan",
   "5d5c58": "chicago",
   "5d5e37": "verdigris",
   "5d7747": "dingley",
   "5da19f": "breaker-bay",
   "5e483e": "kabul",
   "5e5d3b": "hemlock",
   "5f3d26": "irish-coffee",
   "5f5f6e": "mid-gray",
   "5f6672": "shuttle-gray",
   "5fa777": "aqua-forest",
   "5fb3ac": "tradewind",
   "604913": "horses-neck",
   "605b73": "smoky",
   "606e68": "corduroy",
   "6093d1": "danube",
   "612718": "espresso",
   "614051": "eggplant",
   "615d30": "costa-del-sol",
   "61845f": "glade-green",
   "622f30": "buccaneer",
   "623f2d": "quincy",
   "624e9a": "butterfly-bush",
   "625119": "west-coast",
   "626649": "finch",
   "639a8f": "patina",
   "63b76c": "fern",
   "6456b7": "blue-violet",
   "646077": "dolphin",
   "646463": "storm-dust",
   "646a54": "siam",
   "646e75": "nevada",
   "6495ed": "cornflower-blue",
   "64ccdb": "viking",
   "65000b": "rosewood",
   "651a14": "cherrywood",
   "652dc1": "purple-heart",
   "657220": "fern-frond",
   "65745d": "willow-grove",
   "65869f": "hoki",
   "660045": "pompadour",
   "660099": "purple",
   "66023c": "tyrian-purple",
   "661010": "dark-tan",
   "66b58f": "silver-tree",
   "66ff00": "bright-green",
   "66ff66": "screamin-green",
   "67032d": "black-rose",
   "675fa6": "scampi",
   "676662": "ironside-gray",
   "678975": "viridian-green",
   "67a712": "christi",
   "683600": "nutmeg-wood-finish",
   "685558": "zambezi",
   "685e6e": "salt-box",
   "692545": "tawny-port",
   "692d54": "finn",
   "695f62": "scorpion",
   "697e9a": "lynch",
   "6a442e": "spice",
   "6a5d1b": "himalaya",
   "6a6051": "soya-bean",
   "6b2a14": "hairy-heath",
   "6b3fa0": "royal-purple",
   "6b4e31": "shingle-fawn",
   "6b5755": "dorado",
   "6b8ba2": "bermuda-gray",
   "6b8e23": "olive-drab-web",
   "6c3082": "eminence",
   "6cdae7": "turquoise-blue",
   "6d0101": "lonestar",
   "6d5e54": "pine-cone",
   "6d6c6c": "dove-gray",
   "6d9292": "juniper",
   "6d92a1": "gothic",
   "6e0902": "red-oxide",
   "6e1d14": "moccaccino",
   "6e4826": "pickled-bean",
   "6e4b26": "dallas",
   "6e6d57": "kokoda",
   "6e7783": "pale-sky",
   "6f440c": "cafe-royale",
   "6f6a61": "flint",
   "6f8e63": "highland",
   "6f9d02": "limeade",
   "6fd0c5": "downy",
   "701c1c": "prune",
   "704214": "sepia",
   "704a07": "antique-bronze",
   "704f50": "ferra",
   "706555": "coffee",
   "708090": "slate-gray",
   "711a00": "cedar-wood-finish",
   "71291d": "metallic-copper",
   "714693": "affair",
   "714ab2": "studio",
   "715d47": "tobacco-brown",
   "716338": "yellow-metal",
   "716b56": "peat",
   "716e10": "olivetone",
   "717486": "storm-gray",
   "718080": "sirocco",
   "71d9e2": "aquamarine-blue",
   "72010f": "venetian-red",
   "724a2f": "old-copper",
   "726d4e": "go-ben",
   "727b89": "raven",
   "731e8f": "seance",
   "734a12": "raw-umber",
   "736c9f": "kimberly",
   "736d58": "crocodile",
   "737829": "crete",
   "738678": "xanadu",
   "74640d": "spicy-mustard",
   "747d63": "limed-ash",
   "747d83": "rolling-stone",
   "748881": "blue-smoke",
   "749378": "laurel",
   "74c365": "mantis",
   "755a57": "russett",
   "7563a8": "deluge",
   "76395d": "cosmic",
   "7666c6": "blue-marguerite",
   "76bd17": "lima",
   "76d7ea": "sky-blue",
   "770f05": "dark-burgundy",
   "771f1f": "crown-of-thorns",
   "773f1a": "walnut",
   "776f61": "pablo",
   "778120": "pacifika",
   "779e86": "oxley",
   "77dd77": "pastel-green",
   "780109": "japanese-maple",
   "782d19": "mocha",
   "782f16": "peanut",
   "78866b": "camouflage-green",
   "788a25": "wasabi",
   "788bba": "ship-cove",
   "78a39c": "sea-nymph",
   "795d4c": "roman-coffee",
   "796878": "old-lavender",
   "796989": "rum",
   "796a78": "fedora",
   "796d62": "sandstone",
   "79deec": "spray",
   "7a013a": "siren",
   "7a58c1": "fuchsia-blue",
   "7a7a7a": "boulder",
   "7a89b8": "wild-blue-yonder",
   "7ac488": "de-york",
   "7b3801": "red-beech",
   "7b3f00": "chocolate-traditional",
   "7b6608": "yukon-gold",
   "7b7874": "tapa",
   "7b7c94": "waterloo-",
   "7b8265": "flax-smoke",
   "7b9f80": "amulet",
   "7ba05b": "asparagus",
   "7c1c05": "kenyan-copper",
   "7c7631": "pesto",
   "7c778a": "topaz",
   "7c7b7a": "concord",
   "7c7b82": "jumbo",
   "7c881a": "trendy-green",
   "7ca1a6": "gumbo",
   "7cb0a1": "acapulco",
   "7cb7bb": "neptune",
   "7d2c14": "pueblo",
   "7da98d": "bay-leaf",
   "7dc8f7": "malibu",
   "7dd8c6": "bermuda",
   "7e3a15": "copper-canyon",
   "7f1734": "claret",
   "7f3a02": "peru-tan",
   "7f626d": "falcon",
   "7f7589": "mobster",
   "7f76d3": "moody-blue",
   "7fff00": "chartreuse-web",
   "7fffd4": "aquamarine",
   "800000": "css-maroon",
   "800b47": "rose-bud-cherry",
   "801818": "falu-red",
   "80341f": "red-robin",
   "803790": "vivid-violet",
   "80461b": "russet",
   "807e79": "friar-gray",
   "808000": "heart-gold",
   "808080": "trolley-grey",
   "80b3ae": "gulf-stream",
   "80b3c4": "glacier",
   "80ccea": "seagull",
   "81422c": "nutmeg",
   "816e71": "spicy-pink",
   "817377": "empress",
   "819885": "spanish-green",
   "826f65": "sand-dune",
   "828685": "gunsmoke",
   "828f72": "battleship-gray",
   "831923": "merlot",
   "837050": "shadow",
   "83aa5d": "chelsea-cucumber",
   "83d0c6": "monte-carlo",
   "843179": "plum",
   "84a0a0": "granny-smith",
   "8581d9": "chetwode-blue",
   "858470": "bandicoot",
   "859faf": "bali-hai",
   "85c4cc": "half-baked",
   "860111": "red-devil",
   "863c3c": "lotus",
   "86483c": "ironstone",
   "864d1e": "bull-shot",
   "86560a": "rusty-nail",
   "868974": "bitter",
   "86949f": "regent-gray",
   "871550": "disco",
   "87756e": "americano",
   "877c7b": "hurricane",
   "878d91": "oslo-gray",
   "87ab39": "sushi",
   "885342": "spicy-mix",
   "886221": "kumera",
   "888387": "suva-gray",
   "888d65": "avocado",
   "893456": "camelot",
   "893843": "solid-pink",
   "894367": "cannon-pink",
   "897d6d": "makara",
   "8a3324": "burnt-umber",
   "8a73d6": "true-v",
   "8a8360": "clay-creek",
   "8a8389": "monsoon",
   "8a8f8a": "stack",
   "8ab9f1": "jordy-blue",
   "8b00ff": "electric-violet",
   "8b0723": "monarch",
   "8b6b0b": "corn-harvest",
   "8b8470": "olive-haze",
   "8b847e": "schooner",
   "8b8680": "natural-gray",
   "8b9c90": "mantle",
   "8b9fee": "portage",
   "8ba690": "envy",
   "8ba9a5": "cascade",
   "8be6d8": "riptide",
   "8c055e": "cardinal-pink",
   "8c472f": "mule-fawn",
   "8c5738": "potters-clay",
   "8c6495": "trendy-pink",
   "8d0226": "paprika",
   "8d3d38": "sanguine-brown",
   "8d3f3f": "tosca",
   "8d7662": "cement",
   "8d8974": "granite-green",
   "8d90a1": "manatee",
   "8da8cc": "polo-blue",
   "8e0000": "red-berry",
   "8e4d1e": "rope",
   "8e6f70": "opium",
   "8e775e": "domino",
   "8e8190": "mamba",
   "8eabc1": "nepal",
   "8f021c": "pohutukawa",
   "8f3e33": "el-salva",
   "8f4b0e": "korma",
   "8f8176": "squirrel",
   "8fd6b4": "vista-blue",
   "900020": "burgundy",
   "901e1e": "old-brick",
   "907874": "hemp",
   "907b71": "almond-frost",
   "908d39": "sycamore",
   "92000a": "sangria",
   "924321": "cumin",
   "926f5b": "beaver",
   "928573": "stonewall",
   "928590": "venus",
   "9370db": "medium-purple",
   "93ccea": "light-cornflower-blue",
   "93dfb8": "algae-green",
   "944747": "copper-rust",
   "948771": "arrowtown",
   "950015": "scarlett",
   "956387": "strikemaster",
   "959396": "mountain-mist",
   "960018": "carmine",
   "964b00": "brown-traditional",
   "967059": "leather",
   "9678b6": "purple-mountain-majesty",
   "967bb6": "lavender-purple",
   "96a8a1": "pewter",
   "96bbab": "summer-green",
   "97605d": "au-chico",
   "9771b5": "wisteria",
   "97cd2d": "atlantis",
   "983d61": "vin-rouge",
   "9874d3": "lilac-bush",
   "98777b": "bazaar",
   "98811b": "hacienda",
   "988d77": "pale-oyster",
   "98ff98": "mint-green",
   "990066": "fresh-eggplant",
   "991199": "violet-eggplant",
   "991613": "tamarillo",
   "991b07": "totem-pole",
   "996666": "copper-rose",
   "9966cc": "amethyst",
   "997a8d": "mountbatten-pink",
   "9999cc": "blue-bell",
   "9a3820": "prairie-sand",
   "9a6e61": "toast",
   "9a9577": "gurkha",
   "9ab973": "olivine",
   "9ac2b8": "shadow-green",
   "9b4703": "oregon",
   "9b9e8f": "lemon-grass",
   "9c3336": "stiletto",
   "9d5616": "hawaiian-tan",
   "9dacb7": "gull-gray",
   "9dc209": "pistachio",
   "9de093": "granny-smith-apple",
   "9de5ff": "anakiwa",
   "9e5302": "chelsea-gem",
   "9e5b40": "sepia-skin",
   "9ea587": "sage",
   "9ea91f": "citron",
   "9eb1cd": "rock-blue",
   "9edee0": "morning-glory",
   "9f381d": "cognac",
   "9f821c": "reef-gold",
   "9f9f9c": "star-dust",
   "9fa0b1": "santas-gray",
   "9fd7d3": "sinbad",
   "9fdd8c": "feijoa",
   "a02712": "tabasco",
   "a1750d": "buttered-rum",
   "a1adb5": "hit-gray",
   "a1c50a": "citrus",
   "a1dad7": "aqua-island",
   "a1e9de": "water-leaf",
   "a2006d": "flirt",
   "a23b6c": "rouge",
   "a26645": "cape-palliser",
   "a2aab3": "gray-chateau",
   "a2aeab": "edward",
   "a3807b": "pharlap",
   "a397b4": "amethyst-smoke",
   "a3e3ed": "blizzard-blue",
   "a4a49d": "delta",
   "a4a6d3": "wistful",
   "a4af6e": "green-smoke",
   "a50b5e": "jazzberry-jam",
   "a59b91": "zorba",
   "a5cb0c": "bahia",
   "a62f20": "roof-terracotta",
   "a65529": "paarl",
   "a68b5b": "barley-corn",
   "a69279": "donkey-brown",
   "a6a29a": "dawn",
   "a72525": "mexican-red",
   "a7882c": "luxor-gold",
   "a85307": "rich-gold",
   "a86515": "reno-sand",
   "a86b6b": "coral-tree",
   "a8989b": "dusty-gray",
   "a899e6": "dull-lavender",
   "a8a589": "tallow",
   "a8ae9c": "bud",
   "a8af8e": "locust",
   "a8bd9f": "norway",
   "a8e3bd": "chinook",
   "a9a491": "gray-olive",
   "a9acb6": "aluminium",
   "a9b2c3": "cadet-blue",
   "a9b497": "schist",
   "a9bdbf": "tower-gray",
   "a9bef2": "perano",
   "a9c6c2": "opal",
   "aa375a": "night-shadz",
   "aa4203": "fire",
   "aa8b5b": "muesli",
   "aa8d6f": "sandal",
   "aaa5a9": "shady-lady",
   "aaa9cd": "logan",
   "aaabb7": "spun-pearl",
   "aad6e6": "regent-st-blue",
   "aaf0d1": "magic-mint",
   "ab0563": "lipstick",
   "ab3472": "royal-heath",
   "ab917a": "sandrift",
   "aba0d9": "cold-purple",
   "aba196": "bronco",
   "ac8a56": "limed-oak",
   "ac91ce": "east-side",
   "ac9e22": "lemon-ginger",
   "aca494": "napa",
   "aca586": "hillary",
   "aca59f": "cloudy",
   "acacac": "silver-chalice",
   "acb78e": "swamp-green",
   "accbb1": "spring-rain",
   "acdd4d": "conifer",
   "ace1af": "celadon-green",
   "ad781b": "mandalay",
   "adbed1": "casper",
   "addfad": "moss-green",
   "ade6c4": "padua",
   "adff2f": "green-yellow",
   "ae4560": "hippie-pink",
   "ae6020": "desert",
   "ae809e": "bouquet",
   "af4035": "pale-carmine",
   "af4d43": "apple-blossom",
   "af593e": "brown-rust",
   "af8751": "driftwood",
   "af8f2c": "alpine",
   "af9f1c": "lucky",
   "afa09e": "martini",
   "afb1b8": "bombay",
   "afbdd9": "pigeon-post",
   "b04c6a": "cadillac",
   "b05d54": "matrix",
   "b05e81": "tapestry",
   "b06608": "mai-tai",
   "b09a95": "del-rio",
   "b0e0e6": "powder-blue-web",
   "b0e313": "inch-worm",
   "b10000": "bright-red",
   "b14a0b": "vesuvius",
   "b1610b": "pumpkin-skin",
   "b16d52": "santa-fe",
   "b19461": "teak",
   "b1e2c1": "fringy-flower",
   "b1f4e7": "ice-cold",
   "b20931": "shiraz",
   "b2a1ea": "biloba-flower",
   "b32d29": "tall-poppy",
   "b35213": "fiery-orange",
   "b38007": "hot-toddy",
   "b3af95": "taupe-gray",
   "b3c110": "la-rioja",
   "b43332": "well-read",
   "b44668": "blush",
   "b4cfd3": "jungle-mist",
   "b57281": "turkish-rose",
   "b57edc": "floral-lavender",
   "b5a27f": "mongoose",
   "b5b35c": "olive-green",
   "b5d2ce": "jet-stream",
   "b5ecdf": "cruise",
   "b6316c": "hibiscus",
   "b69d98": "thatch",
   "b6b095": "heathered-gray",
   "b6baa4": "eagle",
   "b6d1ea": "spindle",
   "b6d3bf": "gum-leaf",
   "b7410e": "rust",
   "b78e5c": "muddy-waters",
   "b7a214": "sahara",
   "b7a458": "husk",
   "b7b1b1": "nobel",
   "b7c3d0": "heather",
   "b7f0be": "madang",
   "b81104": "milano-red",
   "b87333": "copper",
   "b8b56a": "gimblet",
   "b8c1b1": "green-spring",
   "b8c25d": "celery",
   "b8e0f9": "sail",
   "b94e48": "deep-chestnut",
   "b95140": "crail",
   "b98d28": "marigold",
   "b9c46a": "wild-willow",
   "b9c8ac": "rainee",
   "ba0101": "guardsman-red",
   "ba450c": "rock-spray",
   "ba6f1e": "bourbon",
   "ba7f03": "pirate-gold",
   "bab1a2": "nomad",
   "bac7c9": "submarine",
   "baeef9": "charlotte",
   "bb3385": "medium-red-violet",
   "bb8983": "brandy-rose",
   "bbd009": "rio-grande",
   "bbd7c1": "surf",
   "bcc9c2": "powder-ash",
   "bd5e2e": "tuscany",
   "bd978e": "quicksand",
   "bdb1a8": "silk",
   "bdb2a1": "malta",
   "bdb3c7": "chatelle",
   "bdbbd7": "lavender-gray",
   "bdbdc6": "french-gray",
   "bdc8b3": "clay-ash",
   "bdc9ce": "loblolly",
   "bdedfd": "french-pass",
   "bea6c3": "london-hue",
   "beb5b7": "pink-swan",
   "bede0d": "fuego",
   "bf5500": "rose-of-sharon",
   "bfb8b0": "tide",
   "bfbed8": "blue-haze",
   "bfc1c2": "silver-sand",
   "bfc921": "key-lime-pie",
   "bfdbe2": "ziggurat",
   "bfff00": "color-wheel-lime",
   "c02b18": "thunderbird",
   "c04737": "mojo",
   "c08081": "old-rose",
   "c0c0c0": "silver",
   "c0d3b9": "pale-leaf",
   "c0d8b6": "pixie-green",
   "c1440e": "tia-maria",
   "c154c1": "deep-fuchsia",
   "c1a004": "buddha-gold",
   "c1b7a4": "bison-hide",
   "c1bab0": "tea",
   "c1becd": "gray-suit",
   "c1d7b0": "sprout",
   "c1f07c": "sulu",
   "c26b03": "indochine",
   "c2955d": "twine",
   "c2bdb6": "cotton-seed",
   "c2cac4": "pumice",
   "c2e8e5": "jagged-ice",
   "c32148": "bright-maroon",
   "c3b091": "css-khaki",
   "c3bfc1": "pale-slate",
   "c3c3bd": "gray-nickel",
   "c3cde6": "periwinkle-gray",
   "c3d1d1": "tiara",
   "c3ddf9": "tropical-blue",
   "c41e3a": "cardinal",
   "c45655": "fuzzy-wuzzy-brown",
   "c45719": "orange-roughy",
   "c4c4bc": "mist-gray",
   "c4d0b0": "coriander",
   "c4f4eb": "mint-tulip",
   "c54b8c": "mulberry",
   "c59922": "nugget",
   "c5994b": "tussock",
   "c5dbca": "sea-mist",
   "c5e17a": "yellow-green",
   "c62d42": "brick-red",
   "c6726b": "contessa",
   "c69191": "oriental-pink",
   "c6a84b": "roti",
   "c6c3b5": "ash",
   "c6c8bd": "kangaroo",
   "c6e610": "las-palmas",
   "c7031e": "monza",
   "c71585": "red-violet",
   "c7bca2": "coral-reef",
   "c7c1ff": "melrose",
   "c7c4bf": "cloud",
   "c7c9d5": "ghost",
   "c7cd90": "pine-glade",
   "c7dde5": "botticelli",
   "c88a65": "antique-brass",
   "c8a2c8": "lilac",
   "c8a528": "hokey-pokey",
   "c8aabf": "lily",
   "c8b568": "laser",
   "c8e3d7": "edgewater",
   "c96323": "piper",
   "c99415": "pizza",
   "c9a0dc": "wisteria",
   "c9b29b": "rodeo-dust",
   "c9b35b": "sundance",
   "c9b93b": "earls-green",
   "c9c0bb": "pale-silver",
   "c9d9d2": "conch",
   "c9ffa2": "reef",
   "c9ffe5": "aero-blue",
   "ca3435": "flush-mahogany",
   "cabb48": "turmeric",
   "cadcd4": "paris-white",
   "cae00d": "bitter-lemon",
   "cae6da": "skeptic",
   "cb8fa9": "viola",
   "cbcab6": "foggy-gray",
   "cbd3b0": "green-mist",
   "cbdbd6": "nebula",
   "cc3333": "persian-red",
   "cc5500": "burnt-orange",
   "cc7722": "ochre",
   "cc8899": "puce",
   "cccaa8": "thistle-green",
   "ccccff": "lavender-blue",
   "ccff00": "fluorescent-yellow",
   "cd5700": "tawny",
   "cd5c5c": "indian-red",
   "cd8429": "brandy-punch",
   "cdf4ff": "onahau",
   "ceb98f": "sorrell-brown",
   "cebaba": "cold-turkey",
   "cec291": "yuma",
   "cec7a7": "chino",
   "cfa39d": "eunry",
   "cfb53b": "old-gold",
   "cfdccf": "tasman",
   "cfe5d2": "surf-crest",
   "cff9f3": "humming-bird",
   "cffaf4": "scandal",
   "d05f04": "red-stage",
   "d06da1": "hopbush",
   "d07d12": "meteor",
   "d0bef8": "perfume",
   "d0c0e5": "prelude",
   "d0f0c0": "tea-green",
   "d18f1b": "geebung",
   "d1bea8": "vanilla",
   "d1c6b4": "soft-amber",
   "d1d2ca": "celeste",
   "d1d2dd": "mischka",
   "d1e231": "pear",
   "d2691e": "cocoa-brown",
   "d27d46": "raw-sienna",
   "d29eaa": "careys-pink",
   "d2b48c": "tan",
   "d2da97": "deco",
   "d2f6de": "blue-romance",
   "d2f8b0": "gossip",
   "d3cbba": "sisal",
   "d3cdc5": "swirl",
   "d47494": "charm",
   "d4b6af": "clam-shell",
   "d4bf8d": "straw",
   "d4c4a8": "akaroa",
   "d4cd16": "bird-flower",
   "d4d7d9": "iron",
   "d4dfe2": "geyser",
   "d4e2fc": "hawkes-blue",
   "d54600": "grenadier",
   "d591a4": "can-can",
   "d59a6f": "whiskey",
   "d5d195": "winter-hazel",
   "d5f6e3": "granny-apple",
   "d69188": "my-pink",
   "d6c562": "tacha",
   "d6cef6": "moon-raker",
   "d6d6d1": "quill-gray",
   "d6ffdb": "snowy-mint",
   "d7837f": "new-york-pink",
   "d7c498": "pavlova",
   "d7d0ff": "fog",
   "d84437": "valencia",
   "d87c63": "japonica",
   "d8bfd8": "thistle",
   "d8c2d5": "maverick",
   "d8fcfa": "foam",
   "d94972": "cabaret",
   "d99376": "burning-sand",
   "d9b99b": "cameo",
   "d9d6cf": "timberwolf",
   "d9dcc1": "tana",
   "d9e4f5": "link-water",
   "d9f7ff": "mabel",
   "da3287": "deep-cerise",
   "da5b38": "flame-pea",
   "da6304": "bamboo",
   "da6a41": "red-damask",
   "da70d6": "orchid",
   "da8a67": "pale-copper",
   "daa520": "goldenrod",
   "daecd6": "zanah",
   "daf4f0": "iceberg",
   "dafaff": "oyster-bay",
   "db5079": "cranberry",
   "db9690": "petite-orchid",
   "db995e": "di-serria",
   "dbdbdb": "alto",
   "dbfff8": "frosted-mint",
   "dc143c": "crimson",
   "dc4333": "punch",
   "dcb20c": "galliano",
   "dcb4bc": "blossom",
   "dcd747": "wattle",
   "dcd9d2": "westar",
   "dcddcc": "moon-mist",
   "dcedb4": "caper",
   "dcf0ea": "swans-down",
   "ddd6d5": "swiss-coffee",
   "ddf9f1": "white-ice",
   "de3163": "cherry",
   "de6360": "roman",
   "dea681": "tumbleweed",
   "deba13": "gold-tips",
   "dec196": "brandy",
   "decbc6": "wafer",
   "ded4a4": "sapling",
   "ded717": "barberry",
   "dee5c0": "beryl-green",
   "def5ff": "pattens-blue",
   "df73ff": "heliotrope",
   "dfbe6f": "apache",
   "dfcd6f": "chenin",
   "dfcfdb": "lola",
   "dfecda": "willow-brook",
   "dfff00": "chartreuse-traditional",
   "e0b0ff": "mauve",
   "e0b646": "anzac",
   "e0b974": "harvest-gold",
   "e0c095": "calico",
   "e0ffff": "light-cyan",
   "e16865": "sunglo",
   "e1bc64": "equator",
   "e1c0c8": "pink-flare",
   "e1e6d6": "periglacial-blue",
   "e1ead4": "kidnapper",
   "e1f6e8": "tara",
   "e25465": "mandy",
   "e2725b": "terra-cotta",
   "e28913": "golden-bell",
   "e292c0": "shocking",
   "e29418": "dixie",
   "e29cd2": "light-orchid",
   "e2d8ed": "snuff",
   "e2ebed": "mystic",
   "e2f3ec": "apple-green",
   "e30b5c": "razzmatazz",
   "e32636": "rose-madder",
   "e34234": "vermilion",
   "e3bebe": "cavern-pink",
   "e3f5e1": "peppermint",
   "e3f988": "mindaro",
   "e47698": "deep-blush",
   "e49b0f": "gamboge",
   "e4c2d5": "melanie",
   "e4cfde": "twilight",
   "e4d1c0": "bone",
   "e4d422": "sunflower",
   "e4d5b7": "grain-brown",
   "e4d69b": "zombie",
   "e4f6e7": "frostee",
   "e4ffd1": "snow-flurry",
   "e52b50": "amaranth",
   "e5841b": "zest",
   "e5ccc9": "dust-storm",
   "e5d7bd": "stark-white",
   "e5d8af": "hampton",
   "e5e0e1": "bon-jour",
   "e5e5e5": "mercury",
   "e5f9f6": "polar",
   "e64e03": "trinidad",
   "e6be8a": "pale-gold",
   "e6bea5": "cashmere",
   "e6d7b9": "double-spanish-white",
   "e6e4d4": "satin-linen",
   "e6f2ea": "harp",
   "e6f8f3": "off-green",
   "e6ffe9": "hint-of-green",
   "e6ffff": "tranquil",
   "e77200": "mango-tango",
   "e7730a": "christine",
   "e79f8c": "tonys-pink",
   "e79fc4": "kobi",
   "e7bcb4": "rose-fog",
   "e7bf05": "corn",
   "e7cd8c": "putty",
   "e7ece6": "gray-nurse",
   "e7f8ff": "lily-white",
   "e7feff": "bubbles",
   "e89928": "fire-bush",
   "e8b9b3": "shilo",
   "e8e0d5": "pearl-bush",
   "e8ebe0": "green-white",
   "e8f1d4": "chrome-white",
   "e8f2eb": "gin",
   "e8f5f2": "aqua-squeeze",
   "e96e00": "clementine",
   "e97451": "burnt-sienna",
   "e97c07": "tahiti-gold",
   "e9cecd": "oyster-pink",
   "e9d75a": "confetti",
   "e9e3e3": "ebb",
   "e9f8ed": "ottoman",
   "e9fffd": "clear-day",
   "ea88a8": "carissma",
   "eaae69": "porsche",
   "eab33b": "tulip-tree",
   "eac674": "rob-roy",
   "eadab8": "raffia",
   "eae8d4": "white-rock",
   "eaf6ee": "panache",
   "eaf6ff": "solitude",
   "eaf9f5": "aqua-spring",
   "eafffe": "dew",
   "eb9373": "apricot",
   "ebc2af": "zinnwaldite",
   "eca927": "fuel-yellow",
   "ecc54e": "ronchi",
   "ecc7ee": "french-lilac",
   "eccdb9": "just-right",
   "ece090": "wild-rice",
   "ecebbd": "pale-spring-bud",
   "ecebce": "aths-special",
   "ecf245": "starship",
   "ed0a3f": "red-ribbon",
   "ed7a1c": "tango",
   "ed9121": "carrot-orange",
   "ed989e": "sea-pink",
   "edb381": "tacao",
   "edc9af": "desert-sand",
   "edcdab": "pancho",
   "eddcb1": "chamois",
   "edea99": "primrose",
   "edf5dd": "frost",
   "edf5f5": "aqua-haze",
   "edf6ff": "zumthor",
   "edf9f1": "narvik",
   "edfc84": "honeysuckle",
   "ee82ee": "violet-web",
   "eec1be": "beauty-bush",
   "eed794": "chalky",
   "eed9c4": "almond",
   "eedc82": "flax",
   "eededa": "bizarre",
   "eee3ad": "double-colonial-white",
   "eeeee8": "cararra",
   "eeef78": "manz",
   "eef0c8": "tahuna-sands",
   "eef0f3": "athens-gray",
   "eef3c3": "tusk",
   "eef4de": "loafer",
   "eef6f7": "catskill-white",
   "eefdff": "twilight-blue",
   "eeff9a": "jonquil",
   "eeffe2": "rice-flower",
   "ef863f": "jaffa",
   "efefef": "gallery",
   "eff2f3": "porcelain",
   "f091a9": "mauvelous",
   "f0d52d": "golden-dream",
   "f0db7d": "golden-sand",
   "f0dc82": "buff",
   "f0e2ec": "prim",
   "f0e68c": "light-khaki",
   "f0eefd": "selago",
   "f0eeff": "titan-white",
   "f0f8ff": "alice-blue",
   "f0fcea": "feta",
   "f18200": "gold-drop",
   "f19bab": "wewak",
   "f1e788": "sahara-sand",
   "f1e9d2": "parchment",
   "f1e9ff": "blue-chalk",
   "f1eec1": "mint-julep",
   "f1f1f1": "seashell",
   "f1f7f2": "saltpan",
   "f1ffad": "tidal",
   "f1ffc8": "chiffon",
   "f2552a": "flamingo",
   "f28500": "tangerine",
   "f2c3b2": "mandys-pink",
   "f2f2f2": "concrete",
   "f2fafa": "black-squeeze",
   "f34723": "pomegranate",
   "f3ad16": "buttercup",
   "f3d69d": "new-orleans",
   "f3d9df": "vanilla-ice",
   "f3e7bb": "sidecar",
   "f3e9e5": "dawn-pink",
   "f3edcf": "wheatfield",
   "f3fb62": "canary",
   "f3fbd4": "orinoco",
   "f3ffd8": "carla",
   "f400a1": "fashion-fuchsia",
   "f4a460": "sandy-brown",
   "f4c430": "saffron",
   "f4d81c": "ripe-lemon",
   "f4ebd3": "janna",
   "f4f2ee": "pampas",
   "f4f4f4": "wild-sand",
   "f4f8ff": "zircon",
   "f57584": "froly",
   "f5c85c": "cream-can",
   "f5c999": "manhattan",
   "f5d5a0": "maize",
   "f5deb3": "wheat",
   "f5e7a2": "sandwisp",
   "f5e7e2": "pot-pourri",
   "f5e9d3": "albescent-white",
   "f5edef": "soft-peach",
   "f5f3e5": "ecru-white",
   "f5f5dc": "beige",
   "f5fb3d": "golden-fizz",
   "f5ffbe": "australian-mint",
   "f64a8a": "french-rose",
   "f653a6": "brilliant-rose",
   "f6a4c9": "illusion",
   "f6f0e6": "merino",
   "f6f7f7": "black-haze",
   "f6ffdc": "spring-sun",
   "f7468a": "violet-red",
   "f77703": "chilean-fire",
   "f77fbe": "persian-pink",
   "f7b668": "rajah",
   "f7c8da": "azalea",
   "f7dbe6": "we-peep",
   "f7f2e1": "quarter-spanish-white",
   "f7f5fa": "whisper",
   "f7faf7": "snow-drift",
   "f8b853": "casablanca",
   "f8c3df": "chantilly",
   "f8d9e9": "cherub",
   "f8db9d": "marzipan",
   "f8dd5c": "energy-yellow",
   "f8e4bf": "givry",
   "f8f0e8": "white-linen",
   "f8f4ff": "magnolia",
   "f8f6f1": "spring-wood",
   "f8f7dc": "coconut-cream",
   "f8f7fc": "white-lilac",
   "f8f8f7": "desert-storm",
   "f8f99c": "texas",
   "f8facd": "corn-field",
   "f8fdd3": "mimosa",
   "f95a61": "carnation",
   "f9bf58": "saffron-mango",
   "f9e0ed": "carousel-pink",
   "f9e4bc": "dairy-cream",
   "f9e663": "portica",
   "f9e6f4": "underage-pink",
   "f9eaf3": "amour",
   "f9f8e4": "rum-swizzle",
   "f9ff8b": "dolly",
   "f9fff6": "sugar-cane",
   "fa7814": "ecstasy",
   "fa9d5a": "tan-hide",
   "fad3a2": "corvette",
   "fadfad": "peach-yellow",
   "fae600": "turbo",
   "faeab9": "astra",
   "faeccc": "champagne",
   "faf0e6": "linen",
   "faf3f0": "fantasy",
   "faf7d6": "citrine-white",
   "fafafa": "alabaster",
   "fafde4": "hint-of-yellow",
   "faffa4": "milan",
   "fb607f": "brink-pink",
   "fb8989": "geraldine",
   "fba0e3": "lavender-rose",
   "fba129": "sea-buckthorn",
   "fbac13": "sun",
   "fbaed2": "lavender-pink",
   "fbb2a3": "rose-bud",
   "fbbeda": "cupid",
   "fbcce7": "classic-rose",
   "fbceb1": "apricot",
   "fbe7b2": "banana-mania",
   "fbe870": "marigold-yellow",
   "fbe96c": "festival",
   "fbea8c": "sweet-corn",
   "fbec5d": "maize",
   "fbf9f9": "hint-of-red",
   "fbffba": "shalimar",
   "fc0fc0": "shocking-pink",
   "fc80a5": "tickle-me-pink",
   "fc9c1d": "tree-poppy",
   "fcc01e": "lightning-yellow",
   "fcd667": "goldenrod",
   "fcd917": "candlelight",
   "fcda98": "cherokee",
   "fcf4d0": "double-pearl-lusta",
   "fcf4dc": "pearl-lusta",
   "fcf8f7": "vista-white",
   "fcfbf3": "bianca",
   "fcfeda": "moon-glow",
   "fcffe7": "china-ivory",
   "fcfff9": "ceramic",
   "fd0e35": "tractor-red",
   "fd5b78": "wild-watermelon",
   "fd7b33": "crusta",
   "fd7c07": "sorbus",
   "fd9fa2": "sweet-pink",
   "fdd5b1": "light-apricot",
   "fdd7e4": "pig-pink",
   "fde1dc": "cinderella",
   "fde295": "golden-glow",
   "fde910": "lemon",
   "fdf5e6": "old-lace",
   "fdf6d3": "half-colonial-white",
   "fdf7ad": "drover",
   "fdfeb8": "pale-prim",
   "fdffd5": "cumulus",
   "fe28a2": "persian-rose",
   "fe4c40": "sunset-orange",
   "fe6f5e": "bittersweet",
   "fe9d04": "california",
   "fea904": "yellow-sea",
   "febaad": "melon",
   "fed33c": "bright-sun",
   "fed85d": "dandelion",
   "fedb8d": "salomie",
   "fee5ac": "cape-honey",
   "feebf3": "remy",
   "feefce": "oasis",
   "fef0ec": "bridesmaid",
   "fef2c7": "beeswax",
   "fef3d8": "bleach-white",
   "fef4cc": "pipi",
   "fef4db": "half-spanish-white",
   "fef4f8": "wisp-pink",
   "fef5f1": "provincial-pink",
   "fef7de": "half-dutch-white",
   "fef8e2": "solitaire",
   "fef8ff": "white-pointer",
   "fef9e3": "off-yellow",
   "fefced": "orange-white",
   "ff0000": "red",
   "ff007f": "bright-pink",
   "ff00cc": "purple-pizzazz",
   "ff00ff": "magenta",
   "ff2400": "scarlet-crayola",
   "ff3399": "wild-strawberry",
   "ff33cc": "razzle-dazzle-rose",
   "ff355e": "radical-red",
   "ff3f34": "red-orange",
   "ff4040": "coral-red",
   "ff4d00": "vermilion",
   "ff4f00": "international-orange",
   "ff6037": "outrageous-orange",
   "ff6600": "blaze-orange",
   "ff66ff": "pink-flamingo",
   "ff681f": "orange",
   "ff69b4": "hot-pink",
   "ff6b53": "persimmon",
   "ff6fff": "ultra-pink",
   "ff7034": "burning-orange",
   "ff7518": "pumpkin",
   "ff7d07": "flamenco",
   "ff7f00": "color-wheel-orange",
   "ff7f50": "coral",
   "ff8c69": "salmon",
   "ff9000": "pizazz",
   "ff910f": "west-side",
   "ff91a4": "salmon-pink",
   "ff9933": "deep-saffron",
   "ff9966": "atomic-tangerine",
   "ff9980": "vivid-tangerine",
   "ff9e2c": "sunshade",
   "ffa000": "orange-peel",
   "ffa194": "mona-lisa",
   "ffa500": "orange-web",
   "ffa6c9": "carnation-pink",
   "ffab81": "hit-pink",
   "ffae42": "yellow-orange",
   "ffb0ac": "cornflower-lilac",
   "ffb1b3": "sundown",
   "ffb31f": "my-sin",
   "ffb555": "texas-rose",
   "ffb7d5": "cotton-candy",
   "ffb97b": "macaroni-and-cheese",
   "ffba00": "selective-yellow",
   "ffbd5f": "koromiko",
   "ffbf00": "fluorescent-orange",
   "ffc0a8": "wax-flower",
   "ffc0cb": "pink",
   "ffc3c0": "your-pink",
   "ffc901": "supernova",
   "ffcba4": "deep-peach",
   "ffcc33": "sunglow",
   "ffcc5c": "golden-tainoi",
   "ffcc99": "peach-orange",
   "ffcd8c": "chardonnay",
   "ffd1dc": "pastel-pink",
   "ffd2b7": "romantic",
   "ffd38c": "grandis",
   "ffd700": "gold-web",
   "ffd800": "school-bus-yellow",
   "ffd8d9": "cosmos",
   "ffdb58": "mustard",
   "ffdcd6": "peach-schnapps",
   "ffddaf": "caramel",
   "ffddcd": "tuft-bush",
   "ffddcf": "watusi",
   "ffddf4": "pink-lace",
   "ffdead": "navajo-white",
   "ffdeb3": "frangipani",
   "ffe1df": "pippin",
   "ffe1f2": "pale-rose",
   "ffe2c5": "negroni",
   "ffe5a0": "cream-brulee",
   "ffe5b4": "peach",
   "ffe6c7": "tequila",
   "ffe772": "kournikova",
   "ffeac8": "sandy-beach",
   "ffead4": "karry",
   "ffec13": "broom",
   "ffedbc": "colonial-white",
   "ffeed8": "derby",
   "ffefa1": "vis-vis",
   "ffefc1": "egg-white",
   "ffefd5": "papaya-whip",
   "ffefec": "fair-pink",
   "fff0db": "peach-cream",
   "fff0f5": "lavender-blush",
   "fff14f": "gorse",
   "fff1b5": "buttermilk",
   "fff1d8": "pink-lady",
   "fff1ee": "forget-me-not",
   "fff1f9": "tutu",
   "fff39d": "picasso",
   "fff3f1": "chardon",
   "fff46e": "paris-daisy",
   "fff4ce": "barley-white",
   "fff4dd": "egg-sour",
   "fff4e0": "sazerac",
   "fff4e8": "serenade",
   "fff4f3": "chablis",
   "fff5ee": "seashell",
   "fff5f3": "sauvignon",
   "fff6d4": "milk-punch",
   "fff6df": "varden",
   "fff6f5": "rose-white",
   "fff8d1": "baja-white",
   "fff9e2": "gin-fizz",
   "fff9e6": "early-dawn",
   "fffacd": "lemon-chiffon",
   "fffaf4": "bridal-heath",
   "fffbdc": "scotch-mist",
   "fffbf9": "soapstone",
   "fffc99": "witch-haze",
   "fffcea": "buttery-white",
   "fffcee": "island-spice",
   "fffdd0": "cream",
   "fffde6": "chilean-heath",
   "fffde8": "travertine",
   "fffdf3": "orchid-white",
   "fffdf4": "quarter-pearl-lusta",
   "fffee1": "half-and-half",
   "fffeec": "apricot-white",
   "fffef0": "rice-cake",
   "fffef6": "black-white",
   "fffefd": "romance",
   "ffff00": "electric-yellow",
   "ffff66": "unmellow-yellow",
   "ffff99": "pale-canary",
   "ffffb4": "portafino",
   "fffff0": "ivory",
   "ffffff": "white",
   "5d8aa8": "rackley",
   "efdecd": "almond",
   "ff7e00": "amber",
   "ff033e": "american-rose",
   "a4c639": "android-green",
   "f2f3f4": "munsell",
   "cd9575": "antique-brass",
   "915c83": "antique-fuchsia",
   "faebd7": "moccasin",
   "008000": "office-green",
   "8db600": "apple-green",
   "4b5320": "army-green",
   "3b444b": "arsenic",
   "e9d66b": "hansa-yellow",
   "b2beb5": "ash-grey",
   "87a96b": "asparagus",
   "a52a2a": "red-brown",
   "fdee00": "aureolin",
   "6e7f80": "aurometalsaurus",
   "ff2052": "awesome",
   "f0ffff": "azure-mist/web",
   "89cff0": "baby-blue",
   "a1caf1": "baby-blue-eyes",
   "f4c2c2": "tea-rose",
   "21abcd": "ball-blue",
   "fae7b5": "banana-mania",
   "ffe135": "banana-yellow",
   "848482": "battleship-grey",
   "bcd4e6": "pale-aqua",
   "9f8170": "beaver",
   "ffe4c4": "bisque",
   "ffebcd": "blanched-almond",
   "318ce7": "bleu-de-france",
   "ace5ee": "blizzard-blue",
   "faf0be": "blond",
   "1f75fe": "blue-crayola",
   "0093af": "blue-munsell",
   "0087bd": "blue-ncs",
   "333399": "blue-pigment",
   "0247fe": "blue-ryb",
   "a2a2d0": "blue-bell",
   "6699cc": "blue-gray",
   "0d98ba": "blue-green",
   "8a2be2": "blue-violet",
   "de5d83": "blush",
   "79443b": "bole",
   "e3dac9": "bone",
   "cc0000": "boston-university-red",
   "006a4e": "bottle-green",
   "873260": "boysenberry",
   "0070ff": "brandeis-blue",
   "b5a642": "brass",
   "cb4154": "brick-red",
   "1dacd6": "bright-cerulean",
   "bf94e4": "bright-lavender",
   "d19fe8": "bright-ube",
   "f4bbff": "electric-lavender",
   "ff55a3": "brilliant-rose",
   "004225": "british-racing-green",
   "cd7f32": "bronze",
   "ffc1cc": "bubble-gum",
   "800020": "burgundy",
   "deb887": "burlywood",
   "bd33a4": "byzantine",
   "702963": "byzantium",
   "536872": "cadet",
   "5f9ea0": "cadet-blue",
   "91a3b0": "cadet-grey",
   "006b3c": "cadmium-green",
   "ed872d": "cadmium-orange",
   "e30022": "cadmium-red",
   "fff600": "cadmium-yellow",
   "a67b5b": "french-beige",
   "4b3621": "cafã©-noir",
   "1e4d2b": "cal-poly-pomona-green",
   "a3c1ad": "cambridge-blue",
   "c19a6b": "lion",
   "ffef00": "yellow-process",
   "ff0800": "candy-apple-red",
   "e4717a": "candy-pink",
   "00bfff": "deep-sky-blue",
   "592720": "caput-mortuum",
   "ff0040": "carmine",
   "eb4c42": "carmine-pink",
   "ff0038": "carmine-red",
   "b31b1b": "cornell-red",
   "99badd": "carolina-blue",
   "92a1cf": "ceil",
   "b2ffff": "celeste-colour",
   "4997d0": "celestial-blue",
   "ec3b83": "cerise-pink",
   "007aa5": "cg-blue",
   "e03c31": "cg-red",
   "a0785a": "chamoisee",
   "fad6a5": "sunset",
   "36454f": "charcoal",
   "ffb7c5": "cherry-blossom-pink",
   "ffa700": "chrome-yellow",
   "98817b": "cinereous",
   "e4d00a": "citrine",
   "6f4e37": "coffee",
   "9bddff": "columbia-blue",
   "002e63": "cool-black",
   "8c92ac": "cool-grey",
   "ff3800": "coquelicot",
   "f88379": "tea-rose-orange",
   "893f45": "cordovan",
   "fff8dc": "cornsilk",
   "fff8e7": "cosmic-latte",
   "ffbcd9": "cotton-candy",
   "be0032": "crimson-glory",
   "00b7eb": "cyan-process",
   "ffff31": "daffodil",
   "f0e130": "dandelion",
   "00008b": "dark-blue",
   "654321": "otter-brown",
   "5d3954": "dark-byzantium",
   "a40000": "dark-candy-apple-red",
   "08457e": "dark-cerulean",
   "986960": "dark-chestnut",
   "cd5b45": "dark-coral",
   "008b8b": "dark-cyan",
   "536878": "paynes-grey",
   "b8860b": "dark-goldenrod",
   "a9a9a9": "dark-gray",
   "013220": "dark-green",
   "1a2421": "dark-jungle-green",
   "bdb76b": "dark-khaki",
   "734f96": "dark-lavender",
   "8b008b": "dark-magenta",
   "556b2f": "dark-olive-green",
   "ff8c00": "dark-orange",
   "9932cc": "dark-orchid",
   "779ecb": "dark-pastel-blue",
   "03c03c": "dark-pastel-green",
   "966fd6": "dark-pastel-purple",
   "c23b22": "dark-pastel-red",
   "e75480": "dark-pink",
   "872657": "dark-raspberry",
   "8b0000": "dark-red",
   "e9967a": "dark-salmon",
   "560319": "dark-scarlet",
   "8fbc8f": "dark-sea-green",
   "3c1414": "dark-sienna",
   "483d8b": "dark-slate-blue",
   "2f4f4f": "dark-slate-gray",
   "177245": "dark-spring-green",
   "918151": "dark-tan",
   "ffa812": "dark-tangerine",
   "cc4e5c": "dark-terra-cotta",
   "00ced1": "dark-turquoise",
   "9400d3": "dark-violet",
   "00693e": "dartmouth-green",
   "555555": "davys-grey",
   "d70a53": "debian-red",
   "a9203e": "deep-carmine",
   "ef3038": "deep-carmine-pink",
   "e9692c": "deep-carrot-orange",
   "704241": "deep-coffee",
   "004b49": "deep-jungle-green",
   "9955bb": "deep-lilac",
   "cc00cc": "deep-magenta",
   "ff1493": "fluorescent-pink",
   "696969": "dim-gray",
   "d71868": "dogwood-rose",
   "85bb65": "dollar-bill",
   "967117": "sandy-taupe",
   "00009c": "duke-blue",
   "e1a95f": "earth-yellow",
   "c2b280": "sand",
   "f0ead6": "eggshell",
   "1034a6": "egyptian-blue",
   "7df9ff": "electric-blue",
   "ff003f": "electric-crimson",
   "6f00ff": "electric-indigo",
   "bf00ff": "electric-purple",
   "3f00ff": "electric-ultramarine",
   "8f00ff": "violet",
   "96c8a2": "eton-blue",
   "b53389": "fandango",
   "e5aa70": "fawn",
   "4d5d53": "feldgrau",
   "ff2800": "ferrari-red",
   "6c541e": "field-drab",
   "b22222": "firebrick",
   "ce2029": "fire-engine-red",
   "e25822": "flame",
   "fc8eac": "flamingo-pink",
   "f7e98e": "flavescent",
   "fffaf0": "floral-white",
   "ff004f": "folly",
   "014421": "up-forest-green",
   "0072bb": "french-blue",
   "86608e": "french-lilac",
   "ff77ff": "fuchsia-pink",
   "e48400": "fulvous",
   "cc6666": "fuzzy-wuzzy",
   "dcdcdc": "gainsboro",
   "f8f8ff": "ghost-white",
   "b06500": "ginger",
   "6082b6": "glaucous",
   "e6e8fa": "glitter",
   "d4af37": "gold-metallic",
   "996515": "golden-brown",
   "fcc200": "golden-poppy",
   "ffdf00": "golden-yellow",
   "a8e4a0": "granny-smith-apple",
   "7f7f7f": "css-gray",
   "bebebe": "x11-gray",
   "1cac78": "green-crayola",
   "00a877": "green-munsell",
   "009f6b": "green-ncs",
   "00a550": "green-pigment",
   "66b032": "green-ryb",
   "a99a86": "grullo",
   "663854": "halaya-aobe",
   "446ccf": "han-blue",
   "663399": "becca-purple",
   "5218fa": "han-purple",
   "c90016": "harvard-crimson",
   "da9100": "harvest-gold",
   "f0fff0": "honeydew",
   "49796b": "hookers-green",
   "ff1dce": "hot-magenta",
   "355e3b": "hunter-green",
   "71a6d2": "iceberg",
   "fcf75e": "icterine",
   "b2ec5d": "inchworm",
   "138808": "india-green",
   "e3a857": "indian-yellow",
   "00416a": "indigo-dye",
   "5a4fcf": "iris",
   "f4f0ec": "isabelline",
   "009000": "islamic-green",
   "f8de7e": "jasmine",
   "d73b3e": "jasper",
   "fada5e": "stil-de-grain-yellow",
   "bdda57": "june-bud",
   "4cbb17": "kelly-green",
   "e8000d": "ku-crimson",
   "087830": "la-salle-green",
   "d6cadd": "languid-lavender",
   "26619c": "lapis-lazuli",
   "fefe22": "laser-lemon",
   "a9ba9d": "laurel-green",
   "cf1020": "lava",
   "e6e6fa": "lavender-mist",
   "c4c3d0": "lavender-gray",
   "9457eb": "lavender-indigo",
   "7cfc00": "lawn-green",
   "fff700": "lemon",
   "add8e6": "light-blue",
   "b5651d": "light-brown",
   "e66771": "light-carmine-pink",
   "f08080": "light-coral",
   "f56991": "light-crimson",
   "f984ef": "light-fuchsia-pink",
   "fafad2": "light-goldenrod-yellow",
   "d3d3d3": "light-gray",
   "90ee90": "light-green",
   "b19cd9": "light-pastel-purple",
   "ffb6c1": "light-pink",
   "ffa07a": "light-salmon",
   "ff9999": "light-salmon-pink",
   "20b2aa": "light-sea-green",
   "87cefa": "light-sky-blue",
   "778899": "light-slate-gray",
   "b38b6d": "light-taupe",
   "e68fac": "light-thulian-pink",
   "ffffed": "light-yellow",
   "32cd32": "lime-green",
   "195905": "lincoln-green",
   "534b4f": "liver",
   "e62020": "lust",
   "ca1f7b": "magenta-dye",
   "ff0090": "magenta-process",
   "c04000": "mahogany",
   "6050dc": "majorelle-blue",
   "979aaa": "manatee",
   "ff8243": "mango-tango",
   "b03060": "rich-maroon",
   "915f6d": "raspberry-glace",
   "ef98aa": "mauvelous",
   "73c2fb": "maya-blue",
   "e5b73b": "meat-brown",
   "66ddaa": "medium-aquamarine",
   "0000cd": "medium-blue",
   "e2062c": "medium-candy-apple-red",
   "f3e5ab": "vanilla",
   "035096": "medium-electric-blue",
   "1c352d": "medium-jungle-green",
   "dda0dd": "plum-web",
   "ba55d3": "medium-orchid",
   "0067a5": "medium-persian-blue",
   "3cb371": "medium-sea-green",
   "7b68ee": "medium-slate-blue",
   "c9dc87": "medium-spring-bud",
   "00fa9a": "medium-spring-green",
   "674c47": "medium-taupe",
   "0054b4": "medium-teal-blue",
   "48d1cc": "medium-turquoise",
   "fdbcb4": "melon",
   "191970": "midnight-blue",
   "004953": "midnight-green",
   "ffc40c": "mikado-yellow",
   "3eb489": "mint",
   "f5fffa": "mint-cream",
   "ffe4e1": "misty-rose",
   "73a9c2": "moonstone-blue",
   "ae0c00": "mordant-red-19",
   "30ba8f": "mountain-meadow",
   "21421e": "myrtle",
   "18453b": "msu-green",
   "f6adc6": "nadeshiko-pink",
   "2a8000": "napier-green",
   "ffa343": "neon-carrot",
   "fe59c2": "neon-fuchsia",
   "39ff14": "neon-green",
   "a4dded": "non-photo-blue",
   "059033": "texas-green",
   "0077be": "ocean-boat-blue",
   "673147": "old-mauve",
   "3c341f": "olive-drab7",
   "0f0f0f": "onyx",
   "b784a7": "opera-mauve",
   "fb9902": "orange-ryb",
   "ff9f00": "orange-peel",
   "ff4500": "red-orange",
   "414a4c": "outer-space",
   "ff6e4a": "outrageous-orange",
   "002147": "oxford-blue",
   "990000": "usc-cardinal",
   "006600": "pakistan-green",
   "273be2": "palatinate-blue",
   "682860": "palatinate-purple",
   "afeeee": "pale-blue",
   "987654": "pale-brown",
   "9bc4e2": "pale-cerulean",
   "ddadaf": "pale-chestnut",
   "abcdef": "pale-cornflower-blue",
   "eee8aa": "pale-goldenrod",
   "98fb98": "pale-green",
   "dcd0ff": "pale-lavender",
   "f984e5": "pale-magenta",
   "fadadd": "pale-pink",
   "db7093": "pale-violet-red",
   "96ded1": "pale-robin-egg-blue",
   "bc987e": "pale-taupe",
   "78184a": "pansy-purple",
   "aec6cf": "pastel-blue",
   "836953": "pastel-brown",
   "cfcfc4": "pastel-gray",
   "f49ac2": "pastel-magenta",
   "ffb347": "pastel-orange",
   "b39eb5": "pastel-purple",
   "ff6961": "pastel-red",
   "cb99c9": "pastel-violet",
   "fdfd96": "pastel-yellow",
   "800080": "css-purple",
   "ffdab9": "peach-puff",
   "eae0c8": "pearl",
   "88d8c0": "pearl-aqua",
   "e6e200": "peridot",
   "d99058": "persian-orange",
   "ec5800": "persimmon",
   "df00ff": "psychedelic-purple",
   "000f89": "phthalo-blue",
   "123524": "phthalo-green",
   "fddde6": "piggy-pink",
   "e7accf": "pink-pearl",
   "f78fa7": "pink-sherbet",
   "93c572": "pistachio",
   "e5e4e2": "platinum",
   "8e4585": "plum-traditional",
   "ff5a36": "portland-orange",
   "ff8f00": "princeton-orange",
   "9f00c5": "purple-munsell",
   "a020f0": "veronica",
   "69359c": "purple-heart",
   "fe4eda": "purple-pizzazz",
   "50404d": "purple-taupe",
   "51484f": "quartz",
   "e30b5d": "raspberry",
   "e25098": "raspberry-pink",
   "b3446c": "raspberry-rose",
   "826644": "raw-umber",
   "e3256b": "razzmatazz",
   "f2003c": "red-munsell",
   "c40233": "red-ncs",
   "ed1c24": "red-pigment",
   "fe2712": "red-ryb",
   "ab4e52": "rose-vale",
   "522d80": "regalia",
   "004040": "rich-black",
   "f1a7fe": "rich-brilliant-lavender",
   "d70040": "rich-carmine",
   "0892d0": "rich-electric-blue",
   "a76bcf": "rich-lavender",
   "b666d2": "rich-lilac",
   "414833": "rifle-green",
   "f9429e": "rose-bonbon",
   "674846": "rose-ebony",
   "b76e79": "rose-gold",
   "ff66cc": "rose-pink",
   "aa98a9": "rose-quartz",
   "905d5d": "rose-taupe",
   "d40000": "rosso-corsa",
   "bc8f8f": "rosy-brown",
   "0038a8": "royal-azure",
   "002366": "royal-blue-traditional",
   "ca2c92": "royal-fuchsia",
   "7851a9": "royal-purple",
   "e0115f": "ruby",
   "ff0028": "ruddy",
   "bb6528": "ruddy-brown",
   "e18e96": "ruddy-pink",
   "a81c07": "rufous",
   "00563f": "sacramento-state-green",
   "8b4513": "saddle-brown",
   "ff6700": "safety-orange",
   "23297a": "st.-patricks-blue",
   "ecd540": "sandstorm",
   "507d2a": "sap-green",
   "0f52ba": "sapphire",
   "cba135": "satin-sheen-gold",
   "76ff7a": "screamin-green",
   "006994": "sea-blue",
   "321414": "seal-brown",
   "8a795d": "shadow",
   "009e60": "shamrock-green",
   "882d17": "sienna",
   "cb410b": "sinopia",
   "007474": "skobeloff",
   "87ceeb": "sky-blue",
   "cf71af": "sky-magenta",
   "6a5acd": "slate-blue",
   "933d41": "smokey-topaz",
   "100c08": "smoky-black",
   "fffafa": "snow",
   "0fc0fc": "spiro-disco-ball",
   "a7fc00": "spring-bud",
   "e4d96f": "straw",
   "f94d00": "tangelo",
   "ffcc00": "usc-gold",
   "8b8589": "taupe-gray",
   "367588": "teal-blue",
   "006d5b": "teal-green",
   "de6fa1": "thulian-pink",
   "fc89ac": "tickle-me-pink",
   "0abab5": "tiffany-blue",
   "e08d3c": "tigers-eye",
   "dbd7d2": "timberwolf",
   "eee600": "titanium-yellow",
   "ff6347": "tomato",
   "746cc0": "toolbox",
   "ffc87c": "topaz",
   "0073cf": "true-blue",
   "417dc1": "tufts-blue",
   "deaa88": "tumbleweed",
   "00ffef": "turquoise-blue",
   "a0d6b4": "turquoise-green",
   "66424d": "tuscan-red",
   "8a496b": "twilight-lavender",
   "0033aa": "ua-blue",
   "d9004c": "ua-red",
   "8878c3": "ube",
   "536895": "ucla-blue",
   "ffb300": "ucla-gold",
   "3cd070": "ufo-green",
   "4166f5": "ultramarine-blue",
   "635147": "umber",
   "5b92e5": "united-nations-blue",
   "b78727": "university-of-california-gold",
   "7b1113": "up-maroon",
   "ae2029": "upsdell-red",
   "e1ad21": "urobilin",
   "d3003f": "utah-crimson",
   "c5b358": "vegas-gold",
   "c80815": "venetian-red",
   "43b3ae": "verdigris",
   "7f00ff": "color-wheel-violet",
   "8601af": "violet-ryb",
   "922724": "vivid-auburn",
   "9f1d35": "vivid-burgundy",
   "da1d81": "vivid-cerise",
   "ffa089": "vivid-tangerine",
   "9f00ff": "vivid-violet",
   "004242": "warm-black",
   "645452": "wenge",
   "f5f5f5": "white-smoke",
   "a2add0": "wild-blue-yonder",
   "ff43a4": "wild-strawberry",
   "fc6c85": "wild-watermelon",
   "722f37": "wine",
   "0f4d92": "yale-blue",
   "efcc00": "yellow-munsell",
   "ffd300": "yellow-ncs",
   "fefe33": "yellow-ryb",
   "9acd32": "yellow-green",
   "0014a8": "zaffre",
   "2c1608": "zinnwaldite-brown"
};

App.Helpers = App.Helpers || {};
App.Helpers.getQueryParams = function(queryString) {
   queryString = queryString.replace("?", "");
   var params = queryString.split("&"),
       paramObject = {};

   if (!s.isBlank(queryString)) {
      _.each(params, function(item){
         var pair = item.split("=");
         if (!_.isUndefined(pair[1])) {
            paramObject[pair[0]] = pair[1];
         } else {
            paramObject[pair[0]] = pair[0];
         }
      });
   }

   return paramObject;
}

App.Helpers = App.Helpers || {};
App.Helpers.hex2rgb = function(hex) {
      hex = parseInt(hex, 16);
      var r = hex >> 16;
      var g = hex >> 8 & 0xFF;
      var b = hex & 0xFF;

      return {
         r: r,
         g: g,
         b: b
      };
};

App.Helpers = App.Helpers || {};
App.Helpers.rgbDistance = function(c1, c2) {
   return Math.pow(c1.r - c2.r, 2) + Math.pow(c1.g - c2.g, 2) + Math.pow(c1.b - c2.b, 2);
};

App.Helpers = App.Helpers || {};
App.Helpers.updateQueryParams = function(param, value) {
   var re = new RegExp("([?&])" + param + "=.*?(&|#|$)(.*)", "gi"),
       hash,
       url = window.location.href;

    if (re.test(url)) {
        if (! _.isUndefined(value) && ! _.isNull(value) && ! s.isBlank(value))
            return url.replace(re, '$1' + param + "=" + value + '$2$3');
        else if (s.isBlank(value)) {
            var urlparts= url.split('?');
            if (urlparts.length>=2) {

              var prefix= encodeURIComponent(param)+'=';
              var pars= urlparts[1].split(/[&;]/g);

              //reverse iteration as may be destructive
              for (var i= pars.length; i-- > 0;) {
                  //idiom for string.startsWith
                  if (pars[i].lastIndexOf(prefix, 0) !== -1) {
                      pars.splice(i, 1);
                  }
              }

              url= urlparts[0]+'?'+pars.join('&');
              return url;
            } else {
              return url;
            }

        } else {
            hash = url.split('#');
            url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
            if (! _.isUndefined(hash[1]) && ! _.isNull(hash[1])) {
                url += '#' + hash[1];
            }
            return url;
        }
    }
    else {
        if (! _.isUndefined(value) && ! _.isNull(value)) {
            var separator = url.indexOf('?') !== -1 ? '&' : '?';
            hash = url.split('#');
            url = hash[0] + separator + param + '=' + value;
            if (! _.isUndefined(hash[1]) && ! _.isNull(hash[1])) {
                url += '#' + hash[1];
            }
            return url;
        }
        else
            return url;
    }
};

App.Modules = App.Modules || {};
App.Modules.GetHexValues = function () {
   /**
    * Entry point. This function will grab the hex
    * code and do the lookups and return the
    * sassMap.
    *
    * @param  Object data
    */
   var colorLookup = function(data) {
      var hexList = $('.js-hex-code').val().split(",");

      _.each(hexList, function(hexItem) {
         var hexVal = hexItem.trim().replace("#", ""),
             match = findMatch(hexVal);

         $(".js-show").append(Handlebars.templates.colorSnippet({
            colorName: match,
            hexValue: hexVal
         }));
      });
   };

   /**
    * Tries to find a matching hex in the colorList
    * if it cannot it will try to find the closest
    * color it can and return that
    *
    * @param  String color
    * @return String
    */
   var findMatch = function(color) {
      return _.isUndefined(App.Helpers.colorList[color]) ? findClosestMatch(color) : App.Helpers.colorList[color];
   };

   /**
    * If We cannot find an exact match in the colorList
    * object, we try to find the closest match. This
    * will loop over all the colors in colorList
    * and calculate a "distance" between the
    * two colors, it will return the name
    * of the color that has the smallest
    * gap between it and the intended
    * hex code.
    *
    * @param  String hexColor

    * @return String
    */
   var findClosestMatch = function(hexColor) {
       var rgb = App.Helpers.hex2rgb(hexColor),
           gap = 3 * Math.pow(256, 2) + 1,
           closest = null;

       _.each(App.Helpers.colorList, function(value, key, index) {
         var diff = App.Helpers.rgbDistance(App.Helpers.hex2rgb(key), rgb);
         if (diff < gap) {
             gap = diff;
             closest = value;
         }
       });

       return closest;
   };

   return {
      init: function() { return this; },

      events: function() {

         // this will bind the click event to the colorLookup function
         Events.bind("click", ".js-find-color-name").to(colorLookup, this);
         return this;
      }
   };

}();


"use strict";

$(App.init);

//# sourceMappingURL=maps/app.min.js.map
